<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node下载安装</title>
    <url>/2025/03/08/front/node_install/</url>
    <content><![CDATA[<p><a href="https://nodejs.org/zh-cn">Node 官网</a></p>
<p><a href="https://nodejs.p2hp.com/">NodeJs 中文网</a></p>
<p><a href="https://cn.vuejs.org/">Vue3 中文官网文档</a></p>
<p><a href="https://vitejs.cn/">Vite 中文官网文档</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://gitee.com/my919/scripts/blob/master/sh/nodejs_install.sh">Nodejs 一键安装配置脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/my919/scripts/blob/master/sh/nodejs_install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x nodejs_install.sh</span><br><span class="line">sh nodejs_install.sh</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>Node -v</li>
<li>npm -v</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2025/03/08/db/mysql/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>PostgreSQL</title>
    <url>/2025/03/08/db/postgres/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Golang下载安装</title>
    <url>/2025/03/08/go/install/</url>
    <content><![CDATA[<p><a href="https://golang.halfiisland.com/">Golang 中文学习文档</a></p>
<p><a href="https://go.p2hp.com/doc/">Golang 中文网</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://gitee.com/my919/scripts/blob/master/sh/golang_install.sh">golang 一键安装配置脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/my919/scripts/blob/master/sh/golang_install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x golang_install.sh</span><br><span class="line">sh golang_install.sh</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># 检查环境配置</span><br><span class="line"><span class="keyword">go</span> env | grep -E <span class="string">&quot;GOROOT|GOPATH|GOPROXY&quot;</span></span><br><span class="line"></span><br><span class="line"># 创建测试程序</span><br><span class="line">mkdir -p $GOPATH/src/hello</span><br><span class="line">cat &gt; $GOPATH/src/hello/main.<span class="keyword">go</span> &lt;&lt;EOF</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Installation Successful!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 编译运行</span><br><span class="line">cd $GOPATH/src/hello &amp;&amp; <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 开源项目</title>
    <url>/2025/03/08/java/apache/</url>
    <content><![CDATA[<p>以下是 <strong>Apache 软件基金会（ASF）</strong> 维护的知名开源项目分类整理，涵盖大数据、云计算、Web 服务、中间件等多个领域：</p>
<h3 id="一、核心基础设施"><a href="#一、核心基础设施" class="headerlink" title="一、核心基础设施"></a><strong>一、核心基础设施</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>HTTP Server</strong></td>
<td>全球使用最广的 Web 服务器（市场份额超 30%）。</td>
</tr>
<tr>
<td><strong>Tomcat</strong></td>
<td>轻量级 Java Servlet 容器，支持 JSP 和 Java EE 规范。</td>
</tr>
<tr>
<td><strong>Maven</strong></td>
<td>Java 项目构建与依赖管理工具，标准化项目结构。</td>
</tr>
<tr>
<td><strong>Ant</strong></td>
<td>经典 Java 构建工具（逐渐被 Maven&#x2F;Gradle 替代）。</td>
</tr>
</tbody></table>
<h3 id="二、大数据与分布式计算"><a href="#二、大数据与分布式计算" class="headerlink" title="二、大数据与分布式计算"></a><strong>二、大数据与分布式计算</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Hadoop</strong></td>
<td>分布式存储（HDFS）与计算框架（MapReduce&#x2F;YARN），大数据生态基石。</td>
</tr>
<tr>
<td><strong>Spark</strong></td>
<td>内存计算引擎，支持批处理、流处理、机器学习和图计算。</td>
</tr>
<tr>
<td><strong>Flink</strong></td>
<td>低延迟流处理框架，支持 Exactly-Once 语义和状态管理。</td>
</tr>
<tr>
<td><strong>Kafka</strong></td>
<td>高吞吐分布式消息队列，用于实时数据管道和流处理。</td>
</tr>
<tr>
<td><strong>Hive</strong></td>
<td>基于 Hadoop 的数据仓库工具，提供类 SQL 查询（HQL）。</td>
</tr>
<tr>
<td><strong>HBase</strong></td>
<td>分布式 NoSQL 数据库，支持海量数据实时读写。</td>
</tr>
<tr>
<td><strong>Druid</strong></td>
<td>实时分析型数据库，专为 OLAP 和时序数据优化。</td>
</tr>
</tbody></table>
<h3 id="三、云计算与容器化"><a href="#三、云计算与容器化" class="headerlink" title="三、云计算与容器化"></a><strong>三、云计算与容器化</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>CloudStack</strong></td>
<td>IaaS 云平台，支持虚拟机、网络和存储资源管理。</td>
</tr>
<tr>
<td><strong>Mesos</strong></td>
<td>分布式资源管理框架，曾用于 Twitter、Apple 等大规模集群。</td>
</tr>
<tr>
<td><strong>OpenWhisk</strong></td>
<td>开源 Serverless 平台（类似 AWS Lambda）。</td>
</tr>
<tr>
<td><strong>SkyWalking</strong></td>
<td>分布式系统 APM（应用性能监控），支持微服务和云原生架构。</td>
</tr>
</tbody></table>
<h3 id="四、数据库与存储"><a href="#四、数据库与存储" class="headerlink" title="四、数据库与存储"></a><strong>四、数据库与存储</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Cassandra</strong></td>
<td>高可用分布式 NoSQL 数据库，线性扩展能力强。</td>
</tr>
<tr>
<td><strong>CouchDB</strong></td>
<td>文档型数据库，支持多版本控制和离线同步。</td>
</tr>
<tr>
<td><strong>IoTDB</strong></td>
<td>专为物联网设计的时序数据库，支持高效存储和查询。</td>
</tr>
</tbody></table>
<h3 id="五、中间件与消息服务"><a href="#五、中间件与消息服务" class="headerlink" title="五、中间件与消息服务"></a><strong>五、中间件与消息服务</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ActiveMQ</strong></td>
<td>支持多种协议（AMQP、MQTT）的消息中间件。</td>
</tr>
<tr>
<td><strong>RocketMQ</strong></td>
<td>阿里开源的金融级消息队列，支持事务消息和顺序消息。</td>
</tr>
<tr>
<td><strong>Dubbo</strong></td>
<td>高性能 Java RPC 框架，用于微服务架构。</td>
</tr>
</tbody></table>
<h3 id="六、开发与工具链"><a href="#六、开发与工具链" class="headerlink" title="六、开发与工具链"></a><strong>六、开发与工具链</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Groovy</strong></td>
<td>动态 JVM 语言，语法简洁，兼容 Java。</td>
</tr>
<tr>
<td><strong>NetBeans</strong></td>
<td>集成开发环境（IDE），支持 Java、PHP 等语言。</td>
</tr>
<tr>
<td><strong>JMeter</strong></td>
<td>性能测试工具，支持 HTTP、FTP、JDBC 等协议压测。</td>
</tr>
</tbody></table>
<h3 id="七、机器学习与-AI"><a href="#七、机器学习与-AI" class="headerlink" title="七、机器学习与 AI"></a><strong>七、机器学习与 AI</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>MXNet</strong></td>
<td>支持动态&#x2F;静态图的深度学习框架，被亚马逊 AWS 采用。</td>
</tr>
<tr>
<td><strong>Mahout</strong></td>
<td>机器学习算法库，集成分类、聚类、推荐等经典算法。</td>
</tr>
</tbody></table>
<h3 id="八、其他领域"><a href="#八、其他领域" class="headerlink" title="八、其他领域"></a><strong>八、其他领域</strong></h3><table>
<thead>
<tr>
<th>项目</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><strong>POI</strong></td>
<td>Java 操作 Microsoft Office 文档（Excel&#x2F;Word）的工具库。</td>
</tr>
<tr>
<td><strong>PDFBox</strong></td>
<td>处理 PDF 文件的 Java 库，支持文本提取、加密和签名。</td>
</tr>
<tr>
<td><strong>Shiro</strong></td>
<td>轻量级安全框架，提供认证、授权和会话管理。</td>
</tr>
</tbody></table>
<h3 id="完整列表与更新"><a href="#完整列表与更新" class="headerlink" title="完整列表与更新"></a><strong>完整列表与更新</strong></h3><ul>
<li><strong>官方项目目录</strong>：<a href="https://projects.apache.org/">Apache Projects Directory</a></li>
<li><strong>孵化项目</strong>：<a href="https://incubator.apache.org/">Apache Incubator</a>（新项目孵化区）</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Apache 开源项目覆盖 <strong>Web 服务、大数据、云计算、中间件、数据库、AI</strong> 等关键领域，其特点是：</p>
<ol>
<li><strong>企业级稳定性</strong>：多数项目经过大规模生产环境验证（如 Hadoop、Kafka）。</li>
<li><strong>生态丰富性</strong>：如 Hadoop 生态包含 Hive、HBase、ZooKeeper 等互补工具。</li>
<li><strong>社区驱动</strong>：由全球开发者共同维护，遵循「社区重于代码」原则。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle下载安装</title>
    <url>/2025/03/08/java/gradle/</url>
    <content><![CDATA[<p><a href="https://gradle.org/">Gradle 官网下载地址</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://gitee.com/my919/scripts/blob/master/sh/gradle_install.sh">Gradle 一键安装配置脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/my919/scripts/blob/master/sh/gradle_install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x gradle_install.sh</span><br><span class="line">sh gradle_install.sh</span><br></pre></td></tr></table></figure>

<h2 id="卸载-Gradle"><a href="#卸载-Gradle" class="headerlink" title="卸载 Gradle"></a>卸载 Gradle</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除安装目录和环境配置</span></span><br><span class="line"><span class="built_in">rm</span> -rf /app/gradle</span><br><span class="line"><span class="built_in">rm</span> -f /etc/profile.d/gradle.sh</span><br></pre></td></tr></table></figure>

<h2 id="加速依赖下载"><a href="#加速依赖下载" class="headerlink" title="加速依赖下载"></a><strong>加速依赖下载</strong></h2><p>在 <code>$HOME/.gradle/init.gradle</code> 中添加国内镜像：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">allprojects <span class="punctuation">&#123;</span></span><br><span class="line">    repositories <span class="punctuation">&#123;</span></span><br><span class="line">        maven <span class="punctuation">&#123;</span> url &#x27;https<span class="punctuation">:</span><span class="comment">//maven.aliyun.com/repository/public/&#x27; &#125;</span></span><br><span class="line">        mavenCentral()</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置-Gradle-守护进程"><a href="#2-配置-Gradle-守护进程" class="headerlink" title="2. 配置 Gradle 守护进程"></a><strong>2. 配置 Gradle 守护进程</strong></h4><p>在 <code>$HOME/.gradle/gradle.properties</code> 中启用：</p>
<p>org.gradle.daemon&#x3D;true<br>org.gradle.parallel&#x3D;true</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK下载安装</title>
    <url>/2025/03/08/java/install/</url>
    <content><![CDATA[<p><a href="https://www.oracle.com/java/technologies/downloads/">JDK 官网下载地址</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://gitee.com/my919/scripts/blob/master/sh/jdk_install.sh">jdk 一键安装配置脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/my919/scripts/blob/master/sh/jdk_install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x jdk_install.sh</span><br><span class="line">sh jdk_install.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven下载安装</title>
    <url>/2025/03/08/java/maven/</url>
    <content><![CDATA[<p><a href="https://maven.p2hp.com/download.html">Maven 官网下载地址</a></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p><a href="https://gitee.com/my919/scripts/blob/master/sh/mvn_install.sh">Maven 一键安装配置脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/my919/scripts/blob/master/sh/mvn_install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x mvn_install.sh</span><br><span class="line">sh mvn_install.sh</span><br></pre></td></tr></table></figure>

<h2 id="卸载-Maven"><a href="#卸载-Maven" class="headerlink" title="卸载 Maven"></a>卸载 Maven</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除安装目录和环境配置</span></span><br><span class="line"><span class="built_in">rm</span> -rf /app/maven</span><br><span class="line"><span class="built_in">rm</span> -f /etc/profile.d/maven.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>系统安装</title>
    <url>/2025/03/08/linux/install/</url>
    <content><![CDATA[<ol>
<li><p>系统 U 盘制作工具<br><a href="https://rufus.ie/zh/">rufus.exe 下载</a><br>先插入 U 盘，工具下载后以管理员权限启动，直接选择镜像文件，点击开始，等待镜像写入完成</p>
</li>
<li><p>云服务器安装系统</p>
<ul>
<li>在选择界面按 F11 进入 BIOS；</li>
<li>选择启动 U 盘，回车；</li>
<li>重启后选择 install 选项；</li>
<li>之后按提示一步一步操作，设置完毕重启即开始安装；</li>
</ul>
</li>
</ol>
<h2 id="防火墙管理"><a href="#防火墙管理" class="headerlink" title="防火墙管理"></a>防火墙管理</h2><p>在 CentOS Stream 9 中，默认使用 <strong>firewalld</strong> 作为防火墙管理工具。以下是防火墙的基本配置和管理方法：</p>
<h3 id="1-检查防火墙状态"><a href="#1-检查防火墙状态" class="headerlink" title="1. 检查防火墙状态"></a>1. <strong>检查防火墙状态</strong></h3><p>sudo firewall-cmd –state</p>
<h1 id="或"><a href="#或" class="headerlink" title="或"></a>或</h1><p>sudo systemctl status firewalld</p>
<h3 id="2-启动-停止防火墙"><a href="#2-启动-停止防火墙" class="headerlink" title="2. 启动&#x2F;停止防火墙"></a>2. <strong>启动&#x2F;停止防火墙</strong></h3><ul>
<li><p><strong>启动防火墙</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停止防火墙</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开机自启</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable firewalld  # 启用自启</span><br><span class="line">sudo systemctl disable firewalld # 禁用自启</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-基本防火墙规则"><a href="#3-基本防火墙规则" class="headerlink" title="3. 基本防火墙规则"></a>3. <strong>基本防火墙规则</strong></h3><h4 id="开放端口或服务"><a href="#开放端口或服务" class="headerlink" title="开放端口或服务"></a><strong>开放端口或服务</strong></h4><ul>
<li><p><strong>开放 HTTP (80) 和 HTTPS (443) 端口</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开放自定义端口（如 8080&#x2F;TCP）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-port=8080/tcp</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重新加载配置</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a><strong>关闭端口</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="4-查看当前规则"><a href="#4-查看当前规则" class="headerlink" title="4. 查看当前规则"></a>4. <strong>查看当前规则</strong></h3><ul>
<li><p><strong>列出所有开放的服务和端口</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --list-all</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看所有区域配置</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --list-all-zones</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-区域（Zone）管理"><a href="#5-区域（Zone）管理" class="headerlink" title="5. 区域（Zone）管理"></a>5. <strong>区域（Zone）管理</strong></h3><ul>
<li><p><strong>查看默认区域</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改默认区域（如设为 <code>public</code>）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --set-default-zone=public</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>临时切换区域（如为网卡 <code>eth0</code> 设置 <code>home</code> 区域）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=home --change-interface=eth0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-高级配置"><a href="#6-高级配置" class="headerlink" title="6. 高级配置"></a>6. <strong>高级配置</strong></h3><h4 id="端口转发（将-80-端口转发到-8080）"><a href="#端口转发（将-80-端口转发到-8080）" class="headerlink" title="端口转发（将 80 端口转发到 8080）"></a><strong>端口转发（将 80 端口转发到 8080）</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="富规则（Rich-Rules）"><a href="#富规则（Rich-Rules）" class="headerlink" title="富规则（Rich Rules）"></a><strong>富规则（Rich Rules）</strong></h4><p>允许来自特定 IP 的 SSH 访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.100&quot; service name=&quot;ssh&quot; accept&#x27;</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7. 常见问题"></a>7. <strong>常见问题</strong></h3><ul>
<li><p><strong>防火墙规则未生效</strong>：确保使用 <code>--permanent</code> 参数后执行 <code>firewall-cmd --reload</code>。</p>
</li>
<li><p><strong>服务无法访问</strong>：检查端口是否开放、区域是否正确，或尝试暂时关闭防火墙测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-开放-SSH-服务"><a href="#8-开放-SSH-服务" class="headerlink" title="8.开放 SSH 服务"></a>8.<strong>开放 SSH 服务</strong></h3><h4 id="方法-1：直接开放-SSH-服务（推荐）"><a href="#方法-1：直接开放-SSH-服务（推荐）" class="headerlink" title="方法 1：直接开放 SSH 服务（推荐）"></a><strong>方法 1：直接开放 SSH 服务（推荐）</strong></h4><p>SSH 服务在 <code>firewalld</code> 中已预定义为 <code>ssh</code>，直接添加规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 永久开放 SSH 服务</span><br><span class="line">sudo firewall-cmd --permanent --add-service=ssh</span><br><span class="line"># 重新加载防火墙配置</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="方法-2：开放-SSH-默认端口（22-TCP）"><a href="#方法-2：开放-SSH-默认端口（22-TCP）" class="headerlink" title="方法 2：开放 SSH 默认端口（22&#x2F;TCP）"></a><strong>方法 2：开放 SSH 默认端口（22&#x2F;TCP）</strong></h4><p>如果修改过 SSH 端口（非默认 22），需手动开放对应端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假设 SSH 端口为 2222（根据实际情况替换）</span><br><span class="line">sudo firewall-cmd --permanent --add-port=2222/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="3-验证规则是否生效"><a href="#3-验证规则是否生效" class="headerlink" title="3. 验证规则是否生效"></a><strong>3. 验证规则是否生效</strong></h3><p>检查已开放的 SSH 服务或端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --list-services    # 查看允许的服务（应包含 &quot;ssh&quot;）</span><br><span class="line">sudo firewall-cmd --list-ports       # 查看允许的端口（如果手动添加了端口）</span><br></pre></td></tr></table></figure>

<h3 id="9-参考文档"><a href="#9-参考文档" class="headerlink" title="9. 参考文档"></a>9. <strong>参考文档</strong></h3><ul>
<li>官方文档：<a href="https://firewalld.org/">https://firewalld.org/</a></li>
<li><code>man firewall-cmd</code>：查看完整命令手册。</li>
</ul>
]]></content>
      <categories>
        <category>CentosStream</category>
      </categories>
      <tags>
        <tag>CentosStream</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 知识</title>
    <url>/2025/03/08/redis/interview/</url>
    <content><![CDATA[<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><ol>
<li><p><strong>Redis 简介</strong></p>
<ul>
<li>基于内存的高性能 key-value 数据库，支持多种数据结构，支持数据持久化。</li>
</ul>
</li>
<li><p><strong>Redis 与 Memcached 的区别</strong></p>
<ul>
<li><strong>数据类型</strong>：Memcached 仅支持字符串，Redis 支持字符串、列表、集合、有序集合、哈希等。</li>
<li><strong>性能</strong>：Redis 速度更快。</li>
<li><strong>持久化</strong>：Redis 支持数据持久化，Memcached 不支持。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>维度</strong></th>
<th><strong>Memcache</strong></th>
<th><strong>Redis</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>数据持久化</strong></td>
<td>不支持</td>
<td>支持 RDB&#x2F;AOF</td>
</tr>
<tr>
<td><strong>数据类型</strong></td>
<td>仅字符串</td>
<td>支持多种数据结构</td>
</tr>
<tr>
<td><strong>内存管理</strong></td>
<td>内存分配简单，易产生碎片</td>
<td>支持内存淘汰策略与碎片整理</td>
</tr>
<tr>
<td><strong>单 Value 大小</strong></td>
<td>最大 1MB</td>
<td>最大 1GB</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Redis 单线程模型</strong></p>
<ul>
<li>通过队列将并发访问串行化，避免多线程上下文切换和锁竞争，提升性能。</li>
<li>高性能原因：<ul>
<li>基于内存操作。</li>
<li>高效数据结构设计。</li>
<li>多路 I&#x2F;O 复用模型（非阻塞 I&#x2F;O）。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="二、数据类型与操作"><a href="#二、数据类型与操作" class="headerlink" title="二、数据类型与操作"></a>二、数据类型与操作</h2><ol start="4">
<li><p><strong>5 种核心数据类型</strong></p>
<ul>
<li>String（字符串）、List（列表）、Set（集合）、Sorted Set（有序集合）、Hash（哈希）。</li>
</ul>
</li>
<li><p><strong>SDS（简单动态字符串）</strong></p>
<ul>
<li>Redis 自定义字符串结构，包含 <code>len</code>（长度）和 <code>free</code>（空闲空间）字段，支持高效追加和预分配。</li>
</ul>
</li>
<li><p><strong>Key 操作命令</strong></p>
<ul>
<li><code>EXISTS key</code>：判断 Key 是否存在。</li>
<li><code>DEL key1 key2</code>：删除指定 Key。</li>
<li><code>DBSIZE</code>：返回当前数据库 Key 总数。</li>
</ul>
</li>
</ol>
<h2 id="三、内存管理与淘汰策略"><a href="#三、内存管理与淘汰策略" class="headerlink" title="三、内存管理与淘汰策略"></a>三、内存管理与淘汰策略</h2><ol start="7">
<li><p><strong>内存划分</strong></p>
<ul>
<li><strong>数据内存</strong>：存储实际数据，计入 <code>used_memory</code>。</li>
<li><strong>缓冲内存</strong>：客户端缓冲区、AOF 缓冲区等。</li>
<li><strong>内存碎片</strong>：物理内存中未被有效利用的空间。</li>
</ul>
</li>
<li><p><strong>6 种淘汰策略</strong></p>
<ul>
<li><code>noeviction</code>：不删除，直接返回错误（默认）。</li>
<li><code>allkeys-lru</code>：全体 Key 中删除最近最少使用的。</li>
<li><code>volatile-lru</code>：仅删除设置了过期时间的 Key 中最近最少使用的。</li>
<li><code>allkeys-random</code>：全体 Key 中随机删除。</li>
<li><code>volatile-random</code>：仅删除设置了过期时间的随机 Key。</li>
<li><code>volatile-ttl</code>：优先删除剩余时间最短的 Key。</li>
</ul>
</li>
<li><p><strong>删除策略</strong></p>
<ul>
<li><strong>定时删除</strong>：精确但消耗 CPU。</li>
<li><strong>惰性删除</strong>：获取时检查，节省 CPU 但可能导致内存泄漏。</li>
<li><strong>定期删除</strong>：折中方案，周期性检查过期 Key。</li>
</ul>
</li>
</ol>
<h2 id="四、持久化"><a href="#四、持久化" class="headerlink" title="四、持久化"></a>四、持久化</h2><ol start="10">
<li><p><strong>持久化方案</strong></p>
<ul>
<li><strong>RDB</strong>：快照持久化，文件紧凑、恢复快，但可能丢失部分数据。</li>
<li><strong>AOF</strong>：日志追加，支持秒级持久化，文件大但兼容性好。</li>
</ul>
</li>
<li><p><strong>持久化策略选择</strong></p>
<ul>
<li>可接受分钟级数据丢失：选择 RDB。</li>
<li>需秒级持久化：选择 AOF。</li>
<li>高可用场景：主从复制结合持久化。</li>
</ul>
</li>
<li><p><strong>AOF 配置示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly <span class="built_in">yes</span>                  <span class="comment"># 开启 AOF</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment"># 文件名</span></span><br><span class="line">appendfsync everysec            <span class="comment"># 每秒同步</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="五、高可用与分布式"><a href="#五、高可用与分布式" class="headerlink" title="五、高可用与分布式"></a>五、高可用与分布式</h2><ol start="13">
<li><p><strong>主从复制</strong></p>
<ul>
<li>实现数据备份和读写分离，缺陷：故障恢复需手动，写操作无法负载均衡。</li>
</ul>
</li>
<li><p><strong>哨兵（Sentinel）</strong></p>
<ul>
<li>在主从复制基础上实现自动化故障恢复，缺陷：存储受单机限制。</li>
</ul>
</li>
<li><p><strong>分布式锁</strong></p>
<ul>
<li>使用 <code>SETNX</code> 争抢锁，结合 <code>EXPIRE</code> 防止死锁（建议用 <code>SET key value EX seconds NX</code> 原子操作）。</li>
<li><strong>Redlock 算法</strong>：向多个 Redis 节点申请锁，半数以上成功且总耗时小于锁有效期则成功。</li>
</ul>
</li>
<li><p><strong>数据分片</strong></p>
<ul>
<li>通过分片解决单机存储限制，结合读写分离提升扩展性。</li>
</ul>
</li>
</ol>
<h2 id="六、缓存问题与解决方案"><a href="#六、缓存问题与解决方案" class="headerlink" title="六、缓存问题与解决方案"></a>六、缓存问题与解决方案</h2><ol start="17">
<li><p><strong>缓存穿透</strong></p>
<ul>
<li>问题：查询不存在的数据，绕过缓存直接访问数据库。</li>
<li>方案：使用布隆过滤器拦截无效请求。</li>
</ul>
</li>
<li><p><strong>缓存雪崩</strong></p>
<ul>
<li>问题：大量 Key 同时失效，请求压垮数据库。</li>
<li>方案：<ul>
<li>分散过期时间。</li>
<li>双缓存策略（A 缓存设过期，B 缓存永久）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>缓存击穿</strong></p>
<ul>
<li>问题：热点 Key 失效后高并发查询数据库。</li>
<li>方案：使用互斥锁（如 <code>SETNX</code>）控制单线程重建缓存。</li>
</ul>
</li>
</ol>
<h2 id="七、高级功能"><a href="#七、高级功能" class="headerlink" title="七、高级功能"></a>七、高级功能</h2><ol start="20">
<li><p><strong>Pipeline</strong></p>
<ul>
<li>批量执行命令减少网络开销，非原子性操作。</li>
</ul>
</li>
<li><p><strong>Lua 脚本</strong></p>
<ul>
<li>支持原子性执行自定义逻辑。</li>
</ul>
</li>
<li><p><strong>Geo 模块</strong></p>
<ul>
<li>存储地理位置信息，支持“附近的人”功能（命令：<code>GEOADD</code>、<code>GEORADIUS</code>）。</li>
</ul>
</li>
<li><p><strong>布隆过滤器</strong></p>
<ul>
<li>通过 Redis Module（如 RedisBloom）实现，快速判断元素是否存在。</li>
</ul>
</li>
</ol>
<h2 id="八、性能与监控"><a href="#八、性能与监控" class="headerlink" title="八、性能与监控"></a>八、性能与监控</h2><ol start="24">
<li><p><strong>性能优化建议</strong></p>
<ul>
<li>Master 节点避免持久化，Slave 节点开启 AOF。</li>
<li>主从节点部署在同一局域网。</li>
</ul>
</li>
<li><p><strong>监控命令</strong></p>
<ul>
<li><code>INFO memory</code>：查看内存使用情况。</li>
<li><code>MONITOR</code>：实时监听所有请求。</li>
<li><code>CONFIG GET/SET</code>：动态调整配置。</li>
</ul>
</li>
</ol>
<h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><ol start="26">
<li><p><strong>LRU 算法实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> CACHE_SIZE;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> cacheSize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>((<span class="type">int</span>) Math.ceil(cacheSize / <span class="number">0.75</span>) + <span class="number">1</span>, <span class="number">0.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        CACHE_SIZE = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; CACHE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis 通讯协议</strong></p>
<ul>
<li>RESP（Redis Serialization Protocol），简单高效，可读性好。</li>
</ul>
</li>
<li><p><strong>如何保证 Redis 中数据均为热点数据？</strong></p>
<ul>
<li>Redis 通过 <strong>内存淘汰策略</strong> 自动清理非热点数据。当内存达到上限时，根据配置的策略淘汰数据：<ul>
<li><strong>volatile-lru</strong>：从已设置过期的 Key 中删除最近最少使用的。</li>
<li><strong>allkeys-lru</strong>：全体 Key 中删除最近最少使用的（推荐用于热点数据场景）。</li>
<li><strong>volatile-ttl</strong>：优先删除即将过期的 Key。</li>
</ul>
</li>
<li><strong>操作建议</strong>：<ul>
<li>对高频访问数据设置合理的过期时间。</li>
<li>结合业务监控，动态调整淘汰策略。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Redis 最适合的场景</strong></p>
<ol>
<li><strong>缓存</strong>：加速热点数据访问，减轻数据库压力。</li>
<li><strong>会话存储（Session）</strong>：分布式系统共享会话信息。</li>
<li><strong>排行榜&#x2F;计数器</strong>：利用 Sorted Set 实现实时排名。</li>
<li><strong>消息队列</strong>：通过 List 或 Stream 支持异步任务处理。</li>
<li><strong>分布式锁</strong>：基于 <code>SETNX</code> 或 Redlock 实现跨服务锁机制。</li>
<li><strong>实时数据分析</strong>：如 HyperLogLog 统计 UV，Bitmaps 记录用户行为。</li>
</ol>
</li>
<li><p><strong>Redis 的同步机制</strong></p>
<ul>
<li><strong>全量同步</strong>（首次同步）：<ol>
<li>Master 执行 <code>BGSAVE</code> 生成 RDB 快照。</li>
<li>将 RDB 文件发送给 Slave，Slave 加载到内存。</li>
<li>Master 将同步期间的写命令存入缓冲区，Slave 加载 RDB 后重放这些命令。</li>
</ol>
</li>
<li><strong>增量同步</strong>（断线重连）：<ul>
<li>Slave 通过 <code>PSYNC</code> 命令发送偏移量（offset），Master 根据偏移量发送未同步的命令。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Redis 集群原理与一致性保证</strong></p>
<ol>
<li><strong>集群类型</strong>：<ul>
<li><strong>Sentinel 集群</strong>：高可用方案，监控 Master&#x2F;Slave，自动故障转移。</li>
<li><strong>Cluster 集群</strong>：分布式数据分片，支持水平扩展（默认 16384 个槽）。</li>
</ul>
</li>
<li><strong>数据一致性保证</strong>：<ul>
<li><strong>异步复制</strong>：默认同步机制，可能丢失部分数据（强一致性需额外配置）。</li>
<li><strong>WAIT 命令</strong>：强制等待指定数量的 Slave 同步完成，实现强一致性（牺牲性能）。</li>
<li><strong>Redis Cluster 的 Gossip 协议</strong>：节点间通过 Gossip 协议交换状态信息，维护集群拓扑。</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Redis 常见性能问题与优化</strong></p>
<ol>
<li><strong>持久化阻塞</strong>：<ul>
<li><strong>避免 Master 持久化</strong>：由 Slave 执行 <code>BGSAVE</code> 或 <code>BGREWRITEAOF</code>。</li>
<li><strong>AOF 重写优化</strong>：控制重写频率，避免 CPU 和内存峰值。</li>
</ul>
</li>
<li><strong>主从复制延迟</strong>：<ul>
<li>Master 和 Slave 部署在同一局域网。</li>
<li>使用高带宽网络，限制单 Master 的 Slave 数量。</li>
</ul>
</li>
<li><strong>内存碎片</strong>：<ul>
<li>启用 <code>activedefrag</code> 自动整理碎片。</li>
<li>监控 <code>mem_fragmentation_ratio</code>，过高时重启实例。</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><strong>总结</strong>：本文档涵盖 Redis 核心概念、数据管理、持久化、高可用架构、缓存问题解决方案及高级功能，适合系统化复习和面试准备。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>列表生成式、生成器、迭代器</title>
    <url>/2025/03/08/python/cgi/</url>
    <content><![CDATA[<p>在 Python 中，<strong>列表生成式（List Comprehensions）</strong>、<strong>生成器（Generators）</strong> 和 <strong>迭代器（Iterators）</strong> 是处理数据集合的核心工具，但它们的用途和实现方式有所不同。以下是详细对比和示例：</p>
<h3 id="1-列表生成式（List-Comprehensions）"><a href="#1-列表生成式（List-Comprehensions）" class="headerlink" title="1. 列表生成式（List Comprehensions）"></a><strong>1. 列表生成式（List Comprehensions）</strong></h3><p>列表生成式是一种简洁的语法，用于快速创建列表。<strong>一次性生成所有元素</strong>，存储在内存中。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> item <span class="keyword">in</span> iterable <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure>

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul>
<li><strong>立即执行</strong>：生成完整的列表对象。</li>
<li><strong>内存占用高</strong>：所有元素同时存在内存中。</li>
<li><strong>适用于小规模数据</strong>或需要多次访问的场景。</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成平方数列表</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的过滤</span></span><br><span class="line">even_squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># [0, 4, 16, 36, 64]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-生成器（Generators）"><a href="#2-生成器（Generators）" class="headerlink" title="2. 生成器（Generators）"></a><strong>2. 生成器（Generators）</strong></h3><p>生成器通过 <strong>惰性计算（Lazy Evaluation）</strong> 按需生成元素，<strong>节省内存</strong>。分为两种形式：</p>
<ul>
<li><strong>生成器表达式（Generator Expressions）</strong></li>
<li><strong>生成器函数（Generator Functions）</strong></li>
</ul>
<h4 id="1-生成器表达式"><a href="#1-生成器表达式" class="headerlink" title="(1) 生成器表达式"></a><strong>(1) 生成器表达式</strong></h4><p>语法类似列表生成式，但用 <code>()</code> 包裹。</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h4 id="2-生成器函数"><a href="#2-生成器函数" class="headerlink" title="(2) 生成器函数"></a><strong>(2) 生成器函数</strong></h4><p>使用 <code>yield</code> 关键字定义，每次生成一个值后暂停，直到下次调用。</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_up_to</span>(<span class="params">n</span>):</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> count &lt;= n:</span><br><span class="line">        <span class="keyword">yield</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">gen = count_up_to(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(gen))  <span class="comment"># [1, 2, 3]（生成器只能遍历一次）</span></span><br></pre></td></tr></table></figure>

<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul>
<li><strong>惰性生成</strong>：逐个生成元素，不占用全部内存。</li>
<li><strong>一次遍历</strong>：生成器用完即失效，不可重复使用。</li>
<li><strong>适合处理大规模数据流</strong>（如文件逐行读取）。</li>
</ul>
<h3 id="3-迭代器（Iterators）"><a href="#3-迭代器（Iterators）" class="headerlink" title="3. 迭代器（Iterators）"></a><strong>3. 迭代器（Iterators）</strong></h3><p>迭代器是实现了 <strong>迭代协议</strong> 的对象，即定义了 <code>__iter__()</code> 和 <code>__next__()</code> 方法的对象。</p>
<h4 id="迭代协议"><a href="#迭代协议" class="headerlink" title="迭代协议"></a><strong>迭代协议</strong></h4><ul>
<li><code>__iter__()</code>：返回迭代器自身（即 <code>self</code>）。</li>
<li><code>__next__()</code>：返回下一个元素，无元素时抛出 <code>StopIteration</code>。</li>
</ul>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, end</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = start</span><br><span class="line">        <span class="variable language_">self</span>.end = end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt; <span class="variable language_">self</span>.end:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        num = <span class="variable language_">self</span>.current</span><br><span class="line">        <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用迭代器</span></span><br><span class="line">counter = Counter(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(counter))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(counter))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul>
<li><strong>通用遍历机制</strong>：所有可迭代对象（如列表、字典）最终通过迭代器遍历。</li>
<li><strong>一次遍历</strong>：迭代器状态会保留，遍历结束后需重新创建。</li>
</ul>
<h3 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a><strong>三者的关系</strong></h3><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th>列表生成式</th>
<th>生成器</th>
<th>迭代器</th>
</tr>
</thead>
<tbody><tr>
<td><strong>内存占用</strong></td>
<td>高（一次性加载）</td>
<td>低（按需生成）</td>
<td>低（按需生成）</td>
</tr>
<tr>
<td><strong>可重用性</strong></td>
<td>是（多次访问）</td>
<td>否（遍历后失效）</td>
<td>否（遍历后失效）</td>
</tr>
<tr>
<td><strong>实现方式</strong></td>
<td>语法糖</td>
<td><code>yield</code> 或生成器表达式</td>
<td>实现<code>__iter__</code> 和 <code>__next__</code></td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>小数据、需多次访问</td>
<td>大数据流、单次遍历</td>
<td>自定义遍历逻辑</td>
</tr>
</tbody></table>
<h3 id="关键区别"><a href="#关键区别" class="headerlink" title="关键区别"></a><strong>关键区别</strong></h3><h4 id="1-列表-vs-生成器表达式"><a href="#1-列表-vs-生成器表达式" class="headerlink" title="1. 列表 vs 生成器表达式"></a><strong>1. 列表 vs 生成器表达式</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表生成式：立即生成所有元素</span></span><br><span class="line">list_data = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1_000_000</span>)]  <span class="comment"># 占用大量内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式：逐个生成元素</span></span><br><span class="line">gen_data = (x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1_000_000</span>))   <span class="comment"># 几乎不占内存</span></span><br></pre></td></tr></table></figure>

<h4 id="2-生成器-vs-迭代器"><a href="#2-生成器-vs-迭代器" class="headerlink" title="2. 生成器 vs 迭代器"></a><strong>2. 生成器 vs 迭代器</strong></h4><ul>
<li>生成器是迭代器的简化实现（自动实现 <code>__iter__</code> 和 <code>__next__</code>）。</li>
<li>迭代器可以更灵活地自定义遍历逻辑。</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><ol>
<li><p><strong>列表生成式</strong>：</p>
<ul>
<li>快速生成小规模列表。</li>
<li>需要多次访问或修改数据。</li>
</ul>
</li>
<li><p><strong>生成器</strong>：</p>
<ul>
<li>处理大规模数据（如日志文件、网络流）。</li>
<li>节省内存的场景（如 <code>for</code> 循环遍历）。</li>
</ul>
</li>
<li><p><strong>迭代器</strong>：</p>
<ul>
<li>自定义复杂遍历逻辑（如树形结构遍历）。</li>
<li>实现惰性计算的数据源。</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>列表生成式</strong>：简单高效，适合已知规模的静态数据。</li>
<li><strong>生成器</strong>：内存友好，适合动态或大规模数据。</li>
<li><strong>迭代器</strong>：提供底层遍历控制，适合定制化需求。</li>
</ul>
<p>通过灵活组合三者，可以在代码效率和内存管理之间找到最佳平衡。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 与 MySQL 数据一致性解决方案详解</title>
    <url>/2025/03/08/redis/Redis%E4%B8%8EMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h2><p>在高并发场景中，引入 Redis 作为缓存层可有效缓解数据库压力。但数据更新时，若 Redis 缓存与 MySQL 数据库的更新顺序或时机不当，会导致 <strong>缓存与数据库数据不一致</strong> 的问题。常见不一致场景包括：</p>
<ul>
<li><strong>先删缓存，后写库</strong>：删缓存后，写库完成前，其他线程读取缓存为空，从数据库加载旧数据到缓存。</li>
<li><strong>先写库，后删缓存</strong>：写库成功后，删缓存失败，缓存中仍为旧数据。</li>
</ul>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="方案一：延时双删策略"><a href="#方案一：延时双删策略" class="headerlink" title="方案一：延时双删策略"></a>方案一：延时双删策略</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h4><ol>
<li><strong>第一次删除缓存</strong>：保证后续读请求直接访问数据库，避免脏数据。</li>
<li><strong>写数据库</strong>：完成数据持久化。</li>
<li><strong>休眠指定时间（如 500ms~1s）</strong>：确保主从同步完成，并让读请求完成旧数据加载。</li>
<li><strong>第二次删除缓存</strong>：清除可能由读请求重新写入的脏数据。</li>
</ol>
<h4 id="伪代码示例"><a href="#伪代码示例" class="headerlink" title="伪代码示例"></a><strong>伪代码示例</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String key, Object data)</span> &#123;</span><br><span class="line">    redis.del(key);        <span class="comment">// 第一次删除缓存</span></span><br><span class="line">    db.update(data);      <span class="comment">// 写数据库</span></span><br><span class="line">    Thread.sleep(<span class="number">500</span>);    <span class="comment">// 休眠等待读请求完成</span></span><br><span class="line">    redis.del(key);       <span class="comment">// 第二次删除缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a><strong>关键点</strong></h4><ul>
<li><strong>休眠时间</strong>：需根据业务读取耗时 + Redis 主从同步耗时综合评估（通常设为 1s 内）。</li>
<li><strong>缓存过期时间</strong>：作为兜底，设置缓存过期时间（如 30 分钟），确保最终一致性。</li>
</ul>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><ul>
<li><strong>优点</strong>：实现简单，适合中小规模场景。</li>
<li><strong>缺点</strong>：<ul>
<li>写操作延迟增加（需两次删缓存 + 休眠）。</li>
<li>极端情况下仍存在短暂不一致。</li>
</ul>
</li>
</ul>
<h3 id="方案二：基于-Binlog-的异步更新"><a href="#方案二：基于-Binlog-的异步更新" class="headerlink" title="方案二：基于 Binlog 的异步更新"></a>方案二：基于 Binlog 的异步更新</h3><h4 id="技术实现流程"><a href="#技术实现流程" class="headerlink" title="技术实现流程"></a><strong>技术实现流程</strong></h4><ol>
<li><strong>数据写入 MySQL</strong>：所有写操作直接更新数据库。</li>
<li><strong>订阅 MySQL Binlog</strong>：通过工具（如 Canal）监听数据库的增删改操作。</li>
<li><strong>解析 Binlog 并推送消息</strong>：将变更数据封装为消息，发送至消息队列（如 Kafka、RabbitMQ）。</li>
<li><strong>消费消息更新 Redis</strong>：消息队列消费者接收变更消息，同步更新 Redis 缓存。</li>
</ol>
<h4 id="核心工具"><a href="#核心工具" class="headerlink" title="核心工具"></a><strong>核心工具</strong></h4><ul>
<li><strong>Canal</strong>：模拟 MySQL Slave 协议，解析 Binlog 并推送数据变更。</li>
<li><strong>消息队列</strong>：解耦数据处理与缓存更新，提升系统可靠性。</li>
</ul>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><ul>
<li><strong>优点</strong>：<ul>
<li>数据同步实时性强，一致性高。</li>
<li>支持高吞吐量，适合大规模分布式系统。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>系统复杂度高，需维护 Canal 和消息队列。</li>
<li>存在短暂延迟（依赖 Binlog 解析和消息消费速度）。</li>
</ul>
</li>
</ul>
<h3 id="辅助策略：缓存过期时间"><a href="#辅助策略：缓存过期时间" class="headerlink" title="辅助策略：缓存过期时间"></a>辅助策略：缓存过期时间</h3><ul>
<li><strong>作用</strong>：作为最终一致性兜底方案，确保即使更新失败，旧数据也会在过期后自动失效。</li>
<li><strong>设置建议</strong>：根据业务容忍度设定（如 10 分钟~1 小时）。</li>
</ul>
<h2 id="三、方案对比与选型建议"><a href="#三、方案对比与选型建议" class="headerlink" title="三、方案对比与选型建议"></a>三、方案对比与选型建议</h2><table>
<thead>
<tr>
<th><strong>方案</strong></th>
<th><strong>适用场景</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>延时双删</strong></td>
<td>中小规模、一致性要求一般</td>
<td>实现简单、成本低</td>
<td>短暂不一致、写延迟增加</td>
</tr>
<tr>
<td><strong>Binlog 异步</strong></td>
<td>大规模、强一致性要求</td>
<td>实时同步、可靠性高</td>
<td>架构复杂、维护成本高</td>
</tr>
</tbody></table>
<h4 id="选型建议"><a href="#选型建议" class="headerlink" title="选型建议"></a><strong>选型建议</strong></h4><ol>
<li><strong>业务容忍短暂不一致</strong>：优先使用 <strong>延时双删 + 缓存过期</strong>，简单高效。</li>
<li><strong>强一致性要求</strong>：选择 <strong>Binlog 异步更新</strong>，结合消息队列提升可靠性。</li>
<li><strong>高并发写场景</strong>：避免频繁删缓存，可结合 <strong>本地缓存 + 分布式锁</strong> 优化。</li>
</ol>
<ul>
<li><strong>延时双删</strong> 通过两次删除缓存降低脏数据概率，适合快速落地。</li>
<li><strong>Binlog 异步更新</strong> 通过订阅数据库日志实现准实时同步，适合复杂系统。</li>
<li><strong>缓存过期时间</strong> 是最终一致性的重要保障，需结合业务场景设定。</li>
</ul>
<p><strong>核心原则</strong>：根据业务对一致性的要求、系统规模及团队技术能力，选择最合适的方案。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka 安装使用</title>
    <url>/2025/03/08/kafka/install/</url>
    <content><![CDATA[<p><a href="https://kafka.p2hp.com/">Kafka 中文官方文档</a></p>
<h3 id="Kafka-功能简介"><a href="#Kafka-功能简介" class="headerlink" title="Kafka 功能简介"></a>Kafka 功能简介</h3><p><strong>Apache Kafka</strong> 是一个开源的 <strong>分布式流处理平台</strong>，最初由 LinkedIn 开发，后成为 Apache 顶级项目。它被设计为高吞吐、低延迟、可水平扩展的实时数据管道系统，广泛应用于大数据和实时计算领域。</p>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a><strong>核心功能</strong></h3><h4 id="1-消息队列（Pub-Sub-模型）"><a href="#1-消息队列（Pub-Sub-模型）" class="headerlink" title="1. 消息队列（Pub&#x2F;Sub 模型）"></a><strong>1. 消息队列（Pub&#x2F;Sub 模型）</strong></h4><ul>
<li><strong>发布-订阅模式</strong>：支持生产者（Producer）发布消息到主题（Topic），消费者（Consumer）订阅并消费消息。</li>
<li><strong>解耦系统</strong>：实现不同服务间的异步通信，降低系统耦合性。</li>
<li><strong>削峰填谷</strong>：缓冲突发流量，避免下游系统过载。</li>
</ul>
<h4 id="2-高吞吐与低延迟"><a href="#2-高吞吐与低延迟" class="headerlink" title="2. 高吞吐与低延迟"></a><strong>2. 高吞吐与低延迟</strong></h4><ul>
<li><strong>顺序读写磁盘</strong>：通过追加写入（Append-Only Log）和零拷贝（Zero-Copy）技术实现每秒百万级消息处理。</li>
<li><strong>批量处理</strong>：支持消息批量发送和压缩（如 GZIP、Snappy），提升传输效率。</li>
</ul>
<h4 id="3-持久化存储"><a href="#3-持久化存储" class="headerlink" title="3. 持久化存储"></a><strong>3. 持久化存储</strong></h4><ul>
<li><strong>消息持久化</strong>：数据默认保留 7 天（可配置），支持回溯消费和历史数据重放。</li>
<li><strong>日志分段存储</strong>：将 Topic 分为多个 Segment，按时间或大小滚动清理旧数据。</li>
</ul>
<h4 id="4-分布式架构"><a href="#4-分布式架构" class="headerlink" title="4. 分布式架构"></a><strong>4. 分布式架构</strong></h4><ul>
<li><strong>Broker 集群</strong>：由多个 Broker 节点组成，支持水平扩展和高可用。</li>
<li><strong>分区（Partition）</strong>：每个 Topic 划分为多个分区，分散存储和计算负载。</li>
<li><strong>副本机制（Replication）</strong>：每个分区有多个副本（Leader&#x2F;Follower），保障数据可靠性。</li>
</ul>
<h4 id="5-容错与高可用"><a href="#5-容错与高可用" class="headerlink" title="5. 容错与高可用"></a><strong>5. 容错与高可用</strong></h4><ul>
<li><strong>自动故障转移</strong>：Leader 节点故障时，Follower 自动选举为新 Leader。</li>
<li><strong>ISR 机制</strong>：通过 <strong>In-Sync Replicas</strong> 保证副本数据一致性，避免数据丢失。</li>
</ul>
<h4 id="6-流处理能力"><a href="#6-流处理能力" class="headerlink" title="6. 流处理能力"></a><strong>6. 流处理能力</strong></h4><ul>
<li><strong>Kafka Streams</strong>：提供轻量级流处理库，支持实时数据转换、聚合和窗口计算。</li>
<li><strong>Kafka Connect</strong>：内置工具集，简化与外部系统（如数据库、Hadoop）的数据集成。</li>
</ul>
<h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a><strong>核心组件</strong></h3><table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Producer</strong></td>
<td>消息生产者，向指定 Topic 发布数据。</td>
</tr>
<tr>
<td><strong>Consumer</strong></td>
<td>消息消费者，以单播（Exclusive）或组播（Consumer Group）模式消费数据。</td>
</tr>
<tr>
<td><strong>Broker</strong></td>
<td>Kafka 服务节点，负责消息存储和路由。</td>
</tr>
<tr>
<td><strong>Topic</strong></td>
<td>逻辑消息分类，如<code>order-events</code>、<code>user-logs</code>。</td>
</tr>
<tr>
<td><strong>Partition</strong></td>
<td>Topic 的物理分片，消息在分区内有序存储。</td>
</tr>
<tr>
<td><strong>ZooKeeper</strong></td>
<td>管理 Broker 元数据、Leader 选举和 Consumer 偏移量（旧版本依赖）。</td>
</tr>
<tr>
<td><strong>Kafka Connect</strong></td>
<td>数据集成工具，支持与外部系统（如 MySQL、Elasticsearch）对接。</td>
</tr>
<tr>
<td><strong>Kafka Streams</strong></td>
<td>流处理库，支持实时数据转换和复杂事件处理。</td>
</tr>
</tbody></table>
<h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a><strong>典型应用场景</strong></h3><ol>
<li><strong>实时日志收集</strong><br>聚合微服务日志，供 Elasticsearch 或 Flink 实时分析。</li>
<li><strong>事件驱动架构</strong><br>处理用户行为事件（如点击、支付），触发下游服务（推荐、风控）。</li>
<li><strong>数据管道（ETL）</strong><br>将数据库变更（通过 CDC）同步到数据仓库（如 Snowflake、BigQuery）。</li>
<li><strong>指标监控</strong><br>传输服务器指标（CPU、内存）到 Prometheus 或 Grafana 可视化。</li>
<li><strong>消息总线</strong><br>作为微服务间的通信中枢，替代传统消息队列（如 RabbitMQ）。</li>
</ol>
<h3 id="Kafka-与其他消息队列对比"><a href="#Kafka-与其他消息队列对比" class="headerlink" title="Kafka 与其他消息队列对比"></a><strong>Kafka 与其他消息队列对比</strong></h3><table>
<thead>
<tr>
<th>特性</th>
<th>Kafka</th>
<th>RabbitMQ</th>
<th>RocketMQ</th>
</tr>
</thead>
<tbody><tr>
<td><strong>吞吐量</strong></td>
<td>超高（百万级&#x2F;秒）</td>
<td>中高（万级&#x2F;秒）</td>
<td>高（十万级&#x2F;秒）</td>
</tr>
<tr>
<td><strong>延迟</strong></td>
<td>低（毫秒级）</td>
<td>低（微秒级）</td>
<td>低（毫秒级）</td>
</tr>
<tr>
<td><strong>持久化</strong></td>
<td>支持（磁盘存储）</td>
<td>可选（内存或磁盘）</td>
<td>支持（磁盘存储）</td>
</tr>
<tr>
<td><strong>消费模式</strong></td>
<td>多订阅者（Consumer Group）</td>
<td>队列（点对点）、发布-订阅</td>
<td>发布-订阅、事务消息</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>大数据流处理、日志聚合</td>
<td>业务解耦、任务队列</td>
<td>金融交易、顺序消息</td>
</tr>
<tr>
<td><strong>运维复杂度</strong></td>
<td>较高（需管理 ZooKeeper&#x2F;Broker）</td>
<td>低</td>
<td>中等</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>核心价值</strong>：Kafka 是 <strong>实时数据流的中枢神经</strong>，适用于需要高吞吐、持久化和分布式协作的场景。</li>
<li><strong>优势</strong>：<ul>
<li>水平扩展：通过增加 Broker 和分区应对数据增长。</li>
<li>数据可靠性：副本机制和 ISR 保障数据不丢失。</li>
<li>生态丰富：与 Flink、Spark、Hadoop 等大数据工具无缝集成。</li>
</ul>
</li>
<li><strong>适用系统</strong>：<ul>
<li>互联网高并发场景（如电商、社交、游戏）。</li>
<li>实时监控与报警系统。</li>
<li>数据湖&#x2F;仓的实时数据接入层。</li>
</ul>
</li>
</ul>
<h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p><a href="https://gitee.com/my919/scripts/blob/master/sh/kafka_install_standalone.sh">Standalone 版部署脚本</a></p>
<figure class="highlight plaintext"><figcaption><span>Kafka基本使用</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 1. 验证服务</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"># 查看 Topic 列表</span><br><span class="line">/app/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092</span><br><span class="line"></span><br><span class="line"># 生产测试消息</span><br><span class="line">echo &quot;Hello Kafka&quot; | /app/kafka/bin/kafka-console-producer.sh \</span><br><span class="line">  --broker-list localhost:9092 --topic test-topic</span><br><span class="line"></span><br><span class="line"># 消费消息</span><br><span class="line">/app/kafka/bin/kafka-console-consumer.sh \</span><br><span class="line">  --bootstrap-server localhost:9092 --topic test-topic --from-beginning</span><br></pre></td></tr></table></figure>

<h4 id="2-服务管理命令"><a href="#2-服务管理命令" class="headerlink" title="2. 服务管理命令"></a>2. <strong>服务管理命令</strong></h4><ul>
<li><p><strong>停止 Kafka</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/app/kafka/bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停止 ZooKeeper</strong>（若由脚本启动）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/app/kafka/bin/zookeeper-server-stop.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-日志查看"><a href="#3-日志查看" class="headerlink" title="3.日志查看"></a>3.<strong>日志查看</strong></h4><ul>
<li>Kafka 日志路径：<code>/app/kafka/logs/server.log</code></li>
<li>ZooKeeper 日志路径：<code>/app/kafka/logs/zookeeper.log</code></li>
</ul>
<h3 id="扩展场景"><a href="#扩展场景" class="headerlink" title="扩展场景"></a><strong>扩展场景</strong></h3><ul>
<li><p><strong>集成 Prometheus 监控</strong><br>修改 <code>server.properties</code> 添加以下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">metrics.reporter.prom.class=org.apache.kafka.common.metrics.PrometheusReporter</span><br><span class="line">metrics.reporter.prom.port=9094</span><br></pre></td></tr></table></figure>

<p>通过 <code>http://IP:9094/metrics</code> 暴露监控指标。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2025/03/08/python/closure/</url>
    <content><![CDATA[<p>在 Python 中，<strong>闭包（Closure）</strong> 是指一个函数（称为内部函数）捕获并“记住”了其外层作用域中的变量（即使外层函数已经执行完毕）。闭包允许函数访问并操作其定义时的上下文环境中的变量，即使这个上下文已经不再活跃。</p>
<h3 id="闭包的核心概念"><a href="#闭包的核心概念" class="headerlink" title="闭包的核心概念"></a><strong>闭包的核心概念</strong></h3><ol>
<li><strong>嵌套函数</strong>：闭包基于嵌套函数（函数内部定义另一个函数）。</li>
<li><strong>引用外部变量</strong>：内部函数引用了外层函数作用域中的变量。</li>
<li><strong>保持变量状态</strong>：即使外层函数执行完毕，内部函数仍能访问外层函数的变量。</li>
</ol>
<h3 id="闭包的简单示例"><a href="#闭包的简单示例" class="headerlink" title="闭包的简单示例"></a><strong>闭包的简单示例</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_func</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y  <span class="comment"># inner_func 捕获了外层作用域中的 x</span></span><br><span class="line">    <span class="keyword">return</span> inner_func</span><br><span class="line"></span><br><span class="line">closure = outer_func(<span class="number">10</span>)  <span class="comment"># outer_func 执行完毕，但 x=10 被保留</span></span><br><span class="line"><span class="built_in">print</span>(closure(<span class="number">5</span>))  <span class="comment"># 输出 15</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>inner_func</code> 是一个闭包，因为它引用了外层函数 <code>outer_func</code> 的参数 <code>x</code>。</li>
<li>即使 <code>outer_func</code> 执行结束，<code>closure</code> 仍然能访问 <code>x=10</code>。</li>
</ul>
<h3 id="闭包的关键特性"><a href="#闭包的关键特性" class="headerlink" title="闭包的关键特性"></a><strong>闭包的关键特性</strong></h3><h4 id="1-捕获变量的生命周期延长"><a href="#1-捕获变量的生命周期延长" class="headerlink" title="1. 捕获变量的生命周期延长"></a>1. <strong>捕获变量的生命周期延长</strong></h4><p>闭包会延长外层函数变量的生命周期：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count  <span class="comment"># 声明修改外层变量</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line">c = counter()</span><br><span class="line"><span class="built_in">print</span>(c())  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(c())  <span class="comment"># 2 (闭包保持了 count 的状态)</span></span><br></pre></td></tr></table></figure>

<h4 id="2-闭包与变量绑定"><a href="#2-闭包与变量绑定" class="headerlink" title="2. 闭包与变量绑定"></a>2. <strong>闭包与变量绑定</strong></h4><p>闭包捕获的是变量的引用，而非变量当前的值。在循环中需注意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">funcs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    funcs.append(inner)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([f() <span class="keyword">for</span> f <span class="keyword">in</span> funcs])  <span class="comment"># 输出 [2, 2, 2]（所有闭包共享最终的 i 值）</span></span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong>：通过参数传递立即绑定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">funcs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">x=i</span>):  <span class="comment"># 立即绑定当前 i 的值到 x</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    funcs.append(inner)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([f() <span class="keyword">for</span> f <span class="keyword">in</span> funcs])  <span class="comment"># 输出 [0, 1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包的常见应用场景"><a href="#闭包的常见应用场景" class="headerlink" title="闭包的常见应用场景"></a><strong>闭包的常见应用场景</strong></h3><h4 id="1-装饰器（Decorators）"><a href="#1-装饰器（Decorators）" class="headerlink" title="1. 装饰器（Decorators）"></a>1. <strong>装饰器（Decorators）</strong></h4><p>装饰器本质上是闭包的应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logger</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">5</span>)  <span class="comment"># 输出 &quot;Calling add&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-延迟计算"><a href="#2-延迟计算" class="headerlink" title="2. 延迟计算"></a>2. <strong>延迟计算</strong></h4><p>闭包可以用于延迟执行或记忆化（Memoization）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lazy_sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>():</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    <span class="keyword">return</span> calculate</span><br><span class="line"></span><br><span class="line">sum_func = lazy_sum(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(sum_func())  <span class="comment"># 输出 8（实际计算在调用时执行）</span></span><br></pre></td></tr></table></figure>

<h4 id="3-封装私有变量"><a href="#3-封装私有变量" class="headerlink" title="3. 封装私有变量"></a>3. <strong>封装私有变量</strong></h4><p>闭包可以模拟私有变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> increment, reset</span><br><span class="line"></span><br><span class="line">inc, reset = create_counter()</span><br><span class="line"><span class="built_in">print</span>(inc())  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(inc())  <span class="comment"># 2</span></span><br><span class="line">reset()</span><br><span class="line"><span class="built_in">print</span>(inc())  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包的注意事项"><a href="#闭包的注意事项" class="headerlink" title="闭包的注意事项"></a><strong>闭包的注意事项</strong></h3><ol>
<li><p><strong>变量修改</strong>：</p>
<ul>
<li>默认情况下，闭包只能读取外部变量，不能修改。</li>
<li>使用 <code>nonlocal</code> 关键字（Python 3+）可以修改外层函数的变量。</li>
<li>对于全局变量，使用 <code>global</code> 关键字。</li>
</ul>
</li>
<li><p><strong>内存泄漏</strong>：</p>
<ul>
<li>闭包会保留外层作用域的变量引用，可能导致内存无法释放。</li>
</ul>
</li>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>闭包访问外部变量比访问局部变量稍慢（需通过作用域链查找）。</li>
</ul>
</li>
</ol>
<h3 id="闭包-vs-类"><a href="#闭包-vs-类" class="headerlink" title="闭包 vs 类"></a><strong>闭包 vs 类</strong></h3><ul>
<li><strong>闭包</strong>：轻量级，适合简单的状态保持。</li>
<li><strong>类</strong>：适合复杂的状态和行为管理。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 闭包实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.count</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式相同</span></span><br><span class="line">c1 = make_counter()</span><br><span class="line">c2 = Counter()</span><br><span class="line"><span class="built_in">print</span>(c1(), c2())  <span class="comment"># 1 1</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>闭包是 Python 中强大的特性，用于：</p>
<ul>
<li><strong>保持状态</strong>：在函数调用间保留上下文。</li>
<li><strong>实现装饰器</strong>：增强函数行为。</li>
<li><strong>封装数据</strong>：模拟私有变量。</li>
</ul>
<p>合理使用闭包可以让代码更简洁高效，但需注意变量作用域和内存管理！</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/2025/03/08/python/decorator/</url>
    <content><![CDATA[<p>在 Python 中，<strong>装饰器（Decorator）</strong> 可以应用于类或方法，用于动态修改类或方法的行为。以下是类装饰器和方法装饰器的详细说明及示例：</p>
<h3 id="一、方法装饰器（Method-Decorators）"><a href="#一、方法装饰器（Method-Decorators）" class="headerlink" title="一、方法装饰器（Method Decorators）"></a><strong>一、方法装饰器（Method Decorators）</strong></h3><p>方法装饰器用于装饰类中的方法（实例方法、类方法、静态方法）。它们的语法和函数装饰器类似，但需注意方法的作用域和参数传递。</p>
<h4 id="1-装饰实例方法"><a href="#1-装饰实例方法" class="headerlink" title="1. 装饰实例方法"></a><strong>1. 装饰实例方法</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_method</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录方法调用的装饰器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Calling method <span class="subst">&#123;func.__name__&#125;</span> with args: <span class="subst">&#123;args&#125;</span>, kwargs: <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(<span class="variable language_">self</span>, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line"><span class="meta">    @log_method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 输出日志后返回 8</span></span><br></pre></td></tr></table></figure>

<h4 id="2-装饰类方法或静态方法"><a href="#2-装饰类方法或静态方法" class="headerlink" title="2. 装饰类方法或静态方法"></a><strong>2. 装饰类方法或静态方法</strong></h4><p>需确保装饰器兼容 <code>@classmethod</code> 或 <code>@staticmethod</code> 的签名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">debug_method</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Debug: <span class="subst">&#123;func.__name__&#125;</span> called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"><span class="meta">    @debug_method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">cls, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Calculator.multiply(<span class="number">2</span>, <span class="number">4</span>))  <span class="comment"># 输出调试信息后返回 8</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用-functools-wraps-保留元数据"><a href="#3-使用-functools-wraps-保留元数据" class="headerlink" title="3. 使用 functools.wraps 保留元数据"></a><strong>3. 使用 <code>functools.wraps</code> 保留元数据</strong></h4><p>避免因装饰器覆盖方法元数据（如方法名、文档字符串）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_input</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;x must be non-negative&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(<span class="variable language_">self</span>, x)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Validator</span>:</span><br><span class="line"><span class="meta">    @validate_input</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算平方&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">obj = Validator()</span><br><span class="line"><span class="built_in">print</span>(obj.square(<span class="number">5</span>))  <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(obj.square.__doc__)  <span class="comment"># 输出 &quot;计算平方&quot;（保留文档字符串）</span></span><br></pre></td></tr></table></figure>

<h3 id="二、类装饰器（Class-Decorators）"><a href="#二、类装饰器（Class-Decorators）" class="headerlink" title="二、类装饰器（Class Decorators）"></a><strong>二、类装饰器（Class Decorators）</strong></h3><p>类装饰器直接作用于类，可以动态修改类的属性或行为。类装饰器的参数是类本身，需返回修改后的类。</p>
<h4 id="1-基本类装饰器"><a href="#1-基本类装饰器" class="headerlink" title="1. 基本类装饰器"></a><strong>1. 基本类装饰器</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_method</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;为类动态添加一个方法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is a dynamically added method&quot;</span></span><br><span class="line">    cls.new_method = new_method</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_method</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">existing_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Existing method&quot;</span></span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="built_in">print</span>(obj.existing_method())  <span class="comment"># Existing method</span></span><br><span class="line"><span class="built_in">print</span>(obj.new_method())       <span class="comment"># This is a dynamically added method</span></span><br></pre></td></tr></table></figure>

<h4 id="2-类装饰器实现单例模式"><a href="#2-类装饰器实现单例模式" class="headerlink" title="2. 类装饰器实现单例模式"></a><strong>2. 类装饰器实现单例模式</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;确保类只有一个实例&quot;&quot;&quot;</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_instance</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> get_instance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">db1 = Database(<span class="string">&quot;MySQL&quot;</span>)</span><br><span class="line">db2 = Database(<span class="string">&quot;PostgreSQL&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(db1.name)  <span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">print</span>(db2.name)  <span class="comment"># MySQL（单例生效，返回同一个实例）</span></span><br><span class="line"><span class="built_in">print</span>(db1 <span class="keyword">is</span> db2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h4 id="3-类装饰器修改初始化行为"><a href="#3-类装饰器修改初始化行为" class="headerlink" title="3. 类装饰器修改初始化行为"></a><strong>3. 类装饰器修改初始化行为</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_creation</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录类的实例化&quot;&quot;&quot;</span></span><br><span class="line">    original_init = cls.__init__</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_init</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Creating instance of <span class="subst">&#123;cls.__name__&#125;</span>&quot;</span>)</span><br><span class="line">        original_init(<span class="variable language_">self</span>, *args, **kwargs)</span><br><span class="line">    cls.__init__ = wrapped_init</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_creation</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">user = User(<span class="string">&quot;Alice&quot;</span>)  <span class="comment"># 输出 &quot;Creating instance of User&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、用类实现装饰器"><a href="#三、用类实现装饰器" class="headerlink" title="三、用类实现装饰器"></a><strong>三、用类实现装饰器</strong></h3><p>装饰器本身也可以是一个类（通过实现 <code>__call__</code> 方法），这种方式适合需要维护状态的装饰器。</p>
<h4 id="1-类实现方法装饰器"><a href="#1-类实现方法装饰器" class="headerlink" title="1. 类实现方法装饰器"></a><strong>1. 类实现方法装饰器</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Retry</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;失败后重试的装饰器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_retries=<span class="number">3</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.max_retries = max_retries</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.max_retries):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Retrying... (<span class="subst">&#123;_ + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;self.max_retries&#125;</span>)&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;All retries failed&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataFetcher</span>:</span><br><span class="line"><span class="meta">    @Retry(<span class="params">max_retries=<span class="number">2</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fetch_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 模拟随机失败</span></span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="keyword">raise</span> ConnectionError(<span class="string">&quot;Connection failed&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data&quot;</span></span><br><span class="line"></span><br><span class="line">fetcher = DataFetcher()</span><br><span class="line"><span class="built_in">print</span>(fetcher.fetch_data())  <span class="comment"># 输出可能重试后返回数据或报错</span></span><br></pre></td></tr></table></figure>

<h4 id="2-类实现类装饰器"><a href="#2-类实现类装饰器" class="headerlink" title="2. 类实现类装饰器"></a><strong>2. 类实现类装饰器</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FreezeAttributes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;禁止添加新属性的类装饰器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, original_class</span>):</span><br><span class="line">        original_class.__setattr__ = cls.prevent_additions</span><br><span class="line">        <span class="keyword">return</span> original_class</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prevent_additions</span>(<span class="params">self, name, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, name):</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">&quot;Cannot add new attributes&quot;</span>)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(<span class="variable language_">self</span>, name, value)</span><br><span class="line"></span><br><span class="line"><span class="meta">@FreezeAttributes</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.host = <span class="string">&quot;localhost&quot;</span></span><br><span class="line"></span><br><span class="line">config = Config()</span><br><span class="line">config.host = <span class="string">&quot;127.0.0.1&quot;</span>  <span class="comment"># 允许修改已有属性</span></span><br><span class="line">config.port = <span class="number">8080</span>         <span class="comment"># 抛出 AttributeError: Cannot add new attributes</span></span><br></pre></td></tr></table></figure>

<h3 id="四、常见应用场景"><a href="#四、常见应用场景" class="headerlink" title="四、常见应用场景"></a><strong>四、常见应用场景</strong></h3><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a><strong>方法装饰器</strong></h4><ul>
<li><strong>输入验证</strong>：检查方法参数合法性。</li>
<li><strong>日志记录</strong>：记录方法的调用和参数。</li>
<li><strong>权限控制</strong>：验证用户权限后执行方法。</li>
<li><strong>缓存结果</strong>：缓存方法返回值（如 <code>@lru_cache</code>）。</li>
</ul>
<h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a><strong>类装饰器</strong></h4><ul>
<li><strong>注册类</strong>：将类添加到全局注册表（如 ORM 模型注册）。</li>
<li><strong>单例模式</strong>：确保类只有一个实例。</li>
<li><strong>动态注入方法</strong>：为类添加通用方法。</li>
<li><strong>元编程控制</strong>：修改类的初始化行为或属性访问。</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol>
<li><p><strong>装饰器顺序</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>: ...</span><br><span class="line"><span class="comment"># 等效于 MyClass = decorator1(decorator2(MyClass))</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>继承与装饰器</strong>：</p>
<ul>
<li>类装饰器会影响所有子类，除非子类显式覆盖装饰行为。</li>
</ul>
</li>
<li><p><strong>性能影响</strong>：</p>
<ul>
<li>复杂的装饰器可能增加代码执行时间（如频繁的日志记录或输入验证）。</li>
</ul>
</li>
</ol>
<p>通过灵活使用类装饰器和方法装饰器，可以显著提升代码的可维护性和复用性，但需合理设计以避免过度抽象。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>协程</title>
    <url>/2025/03/08/python/crotine/</url>
    <content><![CDATA[<p>在 Python 中，<strong>协程（Coroutine）</strong> 是一种更轻量级的并发编程模型，通过 <code>async</code> 和 <code>await</code> 关键字实现，用于高效处理 I&#x2F;O 密集型任务（如网络请求、文件读写）。协程由事件循环（Event Loop）调度，可以在单线程内实现并发，避免多线程的资源竞争和切换开销。</p>
<h3 id="协程的核心概念"><a href="#协程的核心概念" class="headerlink" title="协程的核心概念"></a><strong>协程的核心概念</strong></h3><ol>
<li><strong>异步函数（Async Function）</strong>：使用 <code>async def</code> 定义的函数，内部可包含 <code>await</code> 表达式。</li>
<li><strong>事件循环（Event Loop）</strong>：协程的调度器，负责执行和管理异步任务。</li>
<li><strong>任务（Task）</strong>：对协程的进一步封装，用于并发执行。</li>
</ol>
<h3 id="协程的基本使用"><a href="#协程的基本使用" class="headerlink" title="协程的基本使用"></a><strong>协程的基本使用</strong></h3><h4 id="1-定义协程"><a href="#1-定义协程" class="headerlink" title="1. 定义协程"></a>1. 定义协程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 模拟异步 I/O 操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行协程</span></span><br><span class="line">asyncio.run(hello())  <span class="comment"># 输出 Hello -&gt; (等待1秒) -&gt; World</span></span><br></pre></td></tr></table></figure>

<h4 id="2-并发执行多个协程"><a href="#2-并发执行多个协程" class="headerlink" title="2. 并发执行多个协程"></a>2. 并发执行多个协程</h4><p>使用 <code>asyncio.gather()</code> 并行执行多个协程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 1 done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task 2 done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(task1(), task2())  <span class="comment"># 并发执行</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"><span class="comment"># 输出: Task 1 done -&gt; (等待1秒) -&gt; Task 2 done</span></span><br><span class="line"><span class="comment"># 总耗时约2秒（而非1+2秒）</span></span><br></pre></td></tr></table></figure>

<h3 id="协程与生成器的区别"><a href="#协程与生成器的区别" class="headerlink" title="协程与生成器的区别"></a><strong>协程与生成器的区别</strong></h3><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>协程</strong></th>
<th><strong>生成器</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>目的</strong></td>
<td>异步编程，处理 I&#x2F;O 操作</td>
<td>惰性生成数据</td>
</tr>
<tr>
<td><strong>关键字</strong></td>
<td><code>async</code>、<code>await</code></td>
<td><code>yield</code></td>
</tr>
<tr>
<td><strong>调度方式</strong></td>
<td>由事件循环调度</td>
<td>由<code>next()</code> 逐步执行</td>
</tr>
<tr>
<td><strong>返回值</strong></td>
<td>通过<code>return</code> 返回值</td>
<td>通过<code>yield</code> 产生值</td>
</tr>
<tr>
<td><strong>应用场景</strong></td>
<td>高并发网络请求、数据库异步操作</td>
<td>大数据流处理、节省内存</td>
</tr>
</tbody></table>
<h3 id="协程的关键组件"><a href="#协程的关键组件" class="headerlink" title="协程的关键组件"></a><strong>协程的关键组件</strong></h3><h4 id="1-事件循环（Event-Loop）"><a href="#1-事件循环（Event-Loop）" class="headerlink" title="1. 事件循环（Event Loop）"></a>1. <strong>事件循环（Event Loop）</strong></h4><p>事件循环是协程的调度核心，负责执行异步任务、处理回调和管理系统事件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动管理事件循环（不推荐，通常用 asyncio.run()）</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(hello())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<h4 id="2-任务（Task）"><a href="#2-任务（Task）" class="headerlink" title="2. 任务（Task）"></a>2. <strong>任务（Task）</strong></h4><p>任务是对协程的封装，表示一个正在运行的协程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(hello())  <span class="comment"># 创建任务</span></span><br><span class="line">    <span class="keyword">await</span> task  <span class="comment"># 等待任务完成</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Future-对象"><a href="#3-Future-对象" class="headerlink" title="3. Future 对象"></a>3. <strong>Future 对象</strong></h4><p><code>Future</code> 表示一个异步操作的最终结果，是 <code>Task</code> 的基类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_data</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    future = asyncio.ensure_future(fetch_data())</span><br><span class="line">    result = <span class="keyword">await</span> future  <span class="comment"># 等待 Future 完成</span></span><br><span class="line">    <span class="built_in">print</span>(result)  <span class="comment"># 输出 &quot;Data&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="协程的常见模式"><a href="#协程的常见模式" class="headerlink" title="协程的常见模式"></a><strong>协程的常见模式</strong></h3><h4 id="1-异步上下文管理器"><a href="#1-异步上下文管理器" class="headerlink" title="1. 异步上下文管理器"></a>1. <strong>异步上下文管理器</strong></h4><p>使用 <code>async with</code> 管理异步资源（如数据库连接）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncResource</span>:</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aenter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Acquiring resource&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aexit__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Releasing resource&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">use_resource</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncResource() <span class="keyword">as</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Using resource&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(use_resource())</span><br><span class="line"><span class="comment"># 输出: Acquiring resource -&gt; Using resource -&gt; Releasing resource</span></span><br></pre></td></tr></table></figure>

<h4 id="2-异步迭代器"><a href="#2-异步迭代器" class="headerlink" title="2. 异步迭代器"></a>2. <strong>异步迭代器</strong></h4><p>通过 <code>async for</code> 遍历异步生成的数据流：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncCounter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stop</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.stop = stop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__aiter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__anext__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt;= <span class="variable language_">self</span>.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopAsyncIteration</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.current - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> num <span class="keyword">in</span> AsyncCounter(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(num)  <span class="comment"># 输出 0 -&gt; 1 -&gt; 2（间隔0.5秒）</span></span><br></pre></td></tr></table></figure>

<h3 id="协程的异常处理"><a href="#协程的异常处理" class="headerlink" title="协程的异常处理"></a><strong>协程的异常处理</strong></h3><p>使用 <code>try...except</code> 捕获协程中的异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">error_task</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Something went wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> error_task()</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Caught error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())  <span class="comment"># 输出 Caught error: Something went wrong</span></span><br></pre></td></tr></table></figure>

<h3 id="协程-vs-多线程"><a href="#协程-vs-多线程" class="headerlink" title="协程 vs 多线程"></a><strong>协程 vs 多线程</strong></h3><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>协程</strong></th>
<th><strong>多线程</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>并发模型</strong></td>
<td>单线程内事件循环调度</td>
<td>操作系统线程调度</td>
</tr>
<tr>
<td><strong>内存开销</strong></td>
<td>极低（约 KB 级）</td>
<td>较高（约 MB 级）</td>
</tr>
<tr>
<td><strong>切换开销</strong></td>
<td>极低（无需系统调用）</td>
<td>较高（涉及内核上下文切换）</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>I&#x2F;O 密集型任务（网络、文件）</td>
<td>CPU 密集型任务</td>
</tr>
<tr>
<td><strong>GIL 影响</strong></td>
<td>无影响</td>
<td>受 GIL 限制（CPython）</td>
</tr>
</tbody></table>
<h3 id="协程的常见应用场景"><a href="#协程的常见应用场景" class="headerlink" title="协程的常见应用场景"></a><strong>协程的常见应用场景</strong></h3><ol>
<li><strong>Web 服务器</strong>：处理大量并发 HTTP 请求（如 FastAPI、Sanic）。</li>
<li><strong>爬虫</strong>：异步抓取多个网页。</li>
<li><strong>数据库操作</strong>：异步读写数据库（如 asyncpg、aiomysql）。</li>
<li><strong>微服务通信</strong>：异步调用多个服务接口。</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol>
<li><strong>避免阻塞操作</strong>：协程中不要使用同步阻塞代码（如 <code>time.sleep()</code>），需替换为异步版本（<code>await asyncio.sleep()</code>）。</li>
<li><strong>正确使用异步库</strong>：确保依赖的库支持异步（如 <code>aiohttp</code> 替代 <code>requests</code>）。</li>
<li><strong>调试复杂性</strong>：异步代码的堆栈跟踪可能较难分析。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Python 协程通过 <code>async/await</code> 提供了一种高效的异步编程模型，尤其适合高并发的 I&#x2F;O 密集型任务。结合 <code>asyncio</code> 库，可以轻松实现以下功能：</p>
<ul>
<li>并发执行多个异步任务。</li>
<li>管理异步资源（如网络连接）。</li>
<li>构建高性能的异步应用。</li>
</ul>
<p>通过合理使用协程，可以在不增加线程开销的情况下显著提升程序性能。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>__init__.py</title>
    <url>/2025/03/08/python/init/</url>
    <content><![CDATA[<p>在 Python 中，<code>__init__.py</code>文件是<strong>包（Package）的标识文件</strong>，它的存在使得一个目录被 Python 识别为包，从而支持模块化组织代码。以下是其核心作用和原理：</p>
<h3 id="一、核心作用"><a href="#一、核心作用" class="headerlink" title="一、核心作用"></a><strong>一、核心作用</strong></h3><h4 id="1-标识包目录"><a href="#1-标识包目录" class="headerlink" title="1. 标识包目录"></a><strong>1. 标识包目录</strong></h4><ul>
<li><strong>必要条件</strong>：当目录中包含<code>__init__.py</code>时，Python 才会将其视为一个包（Package），而非普通目录。</li>
<li><strong>示例结构</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_package/</span><br><span class="line">├── __init__.py     # 标识为包</span><br><span class="line">├── module1.py</span><br><span class="line">└── subpackage/</span><br><span class="line">    ├── __init__.py # 子包也需要此文件</span><br><span class="line">    └── module2.py</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-初始化包代码"><a href="#2-初始化包代码" class="headerlink" title="2. 初始化包代码"></a><strong>2. 初始化包代码</strong></h4><ul>
<li><strong>执行时机</strong>：当包或子包被导入时，<code>__init__.py</code>中的代码会自动执行。</li>
<li><strong>典型用途</strong>：<ul>
<li>初始化包级变量或配置。</li>
<li>批量导入子模块，简化外部调用。</li>
<li>定义包的公共接口。</li>
</ul>
</li>
</ul>
<h4 id="3-控制导入行为"><a href="#3-控制导入行为" class="headerlink" title="3. 控制导入行为"></a><strong>3. 控制导入行为</strong></h4><ul>
<li><strong>定义<code>__all__</code>变量</strong>：指定<code>from package import *</code>时导入的模块列表。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line">__all__ = [<span class="string">&quot;module1&quot;</span>, <span class="string">&quot;subpackage&quot;</span>]  <span class="comment"># 允许导出的模块</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、详细用法"><a href="#二、详细用法" class="headerlink" title="二、详细用法"></a><strong>二、详细用法</strong></h3><h4 id="1-空文件（最小化包）"><a href="#1-空文件（最小化包）" class="headerlink" title="1. 空文件（最小化包）"></a><strong>1. 空文件（最小化包）</strong></h4><p>如果无需初始化逻辑，<code>__init__.py</code>可以是空文件，仅用于标识包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_package/</span><br><span class="line">├── __init__.py     # 空文件</span><br><span class="line">└── module1.py</span><br></pre></td></tr></table></figure>

<h4 id="2-初始化包级变量"><a href="#2-初始化包级变量" class="headerlink" title="2. 初始化包级变量"></a><strong>2. 初始化包级变量</strong></h4><p>在<code>__init__.py</code>中定义变量，供其他模块共享：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_package/__init__.py</span></span><br><span class="line">VERSION = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">AUTHOR = <span class="string">&quot;John Doe&quot;</span></span><br></pre></td></tr></table></figure>

<p>外部使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> my_package</span><br><span class="line"><span class="built_in">print</span>(my_package.VERSION)  <span class="comment"># 输出: 1.0.0</span></span><br></pre></td></tr></table></figure>

<h4 id="3-简化模块导入"><a href="#3-简化模块导入" class="headerlink" title="3. 简化模块导入"></a><strong>3. 简化模块导入</strong></h4><p>在<code>__init__.py</code>中导入子模块，简化外部调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_package/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> .module1 <span class="keyword">import</span> func1</span><br><span class="line"><span class="keyword">from</span> .subpackage.module2 <span class="keyword">import</span> func2</span><br></pre></td></tr></table></figure>

<p>外部直接使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> func1, func2  <span class="comment"># 无需写完整路径</span></span><br></pre></td></tr></table></figure>

<h4 id="4-延迟加载大型模块"><a href="#4-延迟加载大型模块" class="headerlink" title="4. 延迟加载大型模块"></a><strong>4. 延迟加载大型模块</strong></h4><p>使用<code>__getattr__</code>动态导入模块（Python 3.7+）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_package/__init__.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;heavy_module&quot;</span>:</span><br><span class="line">        <span class="keyword">from</span> . <span class="keyword">import</span> heavy_module</span><br><span class="line">        <span class="keyword">return</span> heavy_module</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;module <span class="subst">&#123;__name__!r&#125;</span> has no attribute <span class="subst">&#123;name!r&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="三、Python-2-vs-Python-3"><a href="#三、Python-2-vs-Python-3" class="headerlink" title="三、Python 2 vs. Python 3"></a><strong>三、Python 2 vs. Python 3</strong></h3><h4 id="1-Python-2"><a href="#1-Python-2" class="headerlink" title="1. Python 2"></a><strong>1. Python 2</strong></h4><ul>
<li><strong>强制要求</strong>：所有包目录必须包含<code>__init__.py</code>，否则无法导入。</li>
</ul>
<h4 id="2-Python-3-3"><a href="#2-Python-3-3" class="headerlink" title="2. Python 3.3+"></a><strong>2. Python 3.3+</strong></h4><ul>
<li><strong>隐式命名空间包</strong>：允许不含<code>__init__.py</code>的目录作为包（通过<code>PEP 420</code>），但需满足：<ul>
<li>目录位于<code>sys.path</code>中。</li>
<li>未被任何父级传统包（含<code>__init__.py</code>）覆盖。</li>
</ul>
</li>
<li><strong>兼容性建议</strong>：显式保留<code>__init__.py</code>以确保兼容性和明确性。</li>
</ul>
<h3 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a><strong>四、常见问题</strong></h3><h4 id="1-忘记添加-init-py"><a href="#1-忘记添加-init-py" class="headerlink" title="1. 忘记添加__init__.py"></a><strong>1. 忘记添加<code>__init__.py</code></strong></h4><ul>
<li><strong>错误现象</strong>：尝试导入模块时抛出<code>ImportError</code>。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ImportError: No module named &#x27;my_package&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-循环导入"><a href="#2-循环导入" class="headerlink" title="2. 循环导入"></a><strong>2. 循环导入</strong></h4><ul>
<li><strong>风险场景</strong>：在<code>__init__.py</code>中导入其他模块时，若模块间存在相互依赖，会导致循环导入错误。</li>
<li><strong>解决方案</strong>：重构代码或延迟导入（在函数内部导入）。</li>
</ul>
<h3 id="五、最佳实践"><a href="#五、最佳实践" class="headerlink" title="五、最佳实践"></a><strong>五、最佳实践</strong></h3><ol>
<li>**始终包含<code>__init__.py</code>**：即使文件为空，也显式标识包。</li>
<li><strong>精简初始化代码</strong>：避免在<code>__init__.py</code>中编写复杂逻辑，保持轻量。</li>
<li><strong>显式定义公共接口</strong>：通过<code>__all__</code>明确导出内容，避免命名污染。</li>
</ol>
<h3 id="示例项目结构"><a href="#示例项目结构" class="headerlink" title="示例项目结构"></a><strong>示例项目结构</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├── main.py</span><br><span class="line">└── my_package/</span><br><span class="line">    ├── __init__.py         # 包标识</span><br><span class="line">    ├── module1.py          # 模块1</span><br><span class="line">    └── subpackage/</span><br><span class="line">        ├── __init__.py     # 子包标识</span><br><span class="line">        └── module2.py      # 模块2</span><br></pre></td></tr></table></figure>

<p>通过<code>__init__.py</code>，Python 能够以层次化和模块化的方式组织代码，提升可维护性和复用性。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper 安装使用</title>
    <url>/2025/03/08/zk/install/</url>
    <content><![CDATA[<p><a href="https://zookeeper.apache.org/doc/current/">ZooKeeper 官方文档</a></p>
<h3 id="ZooKeeper-功能简介"><a href="#ZooKeeper-功能简介" class="headerlink" title="ZooKeeper 功能简介"></a>ZooKeeper 功能简介</h3><p><strong>ZooKeeper</strong> 是一个开源的分布式协调服务，由 Apache 维护，主要用于解决分布式系统中的数据管理和协调问题。其核心功能包括：</p>
<ol>
<li><strong>配置管理</strong><br>集中存储和管理分布式系统的配置信息，支持动态更新和通知机制。</li>
<li><strong>命名服务</strong><br>提供全局唯一的路径名标识（类似文件系统路径），方便服务注册与发现。</li>
<li><strong>分布式锁</strong><br>实现互斥锁和读写锁，协调多节点对共享资源的访问。</li>
<li><strong>集群管理</strong><br>监控节点状态（存活&#x2F;离线），自动处理主节点选举和故障转移。</li>
<li><strong>数据同步</strong><br>提供强一致性的数据存储，确保所有节点看到的视图一致。</li>
</ol>
<h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p><a href="https://gitee.com/my919/scripts/blob/master/sh/zk_install_standalone.sh">Standalone 版部署脚本</a></p>
<p><a href="https://gitee.com/my919/scripts/blob/master/sh/zk_install_cluster.sh">伪集群一键部署脚本</a></p>
<p>伪集群批量停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> /app/zookeeper-cluster/cluster/node*; <span class="keyword">do</span></span><br><span class="line"> /app/zookeeper-cluster/bin/zkServer.sh --config <span class="variable">$&#123;node&#125;</span>/conf stop</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="ZooKeeper-基本使用"><a href="#ZooKeeper-基本使用" class="headerlink" title="ZooKeeper 基本使用"></a>ZooKeeper 基本使用</h3><h4 id="1-命令行客户端操作"><a href="#1-命令行客户端操作" class="headerlink" title="1. 命令行客户端操作"></a>1. 命令行客户端操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接本地ZooKeeper</span></span><br><span class="line">bin/zkCli.sh -server 127.0.0.1:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用命令</span></span><br><span class="line">create /myapp <span class="string">&quot;config_data&quot;</span>   <span class="comment"># 创建持久节点</span></span><br><span class="line">create -e /ephemeral_node <span class="string">&quot;&quot;</span> <span class="comment"># 创建临时节点（会话结束自动删除）</span></span><br><span class="line">get /myapp                   <span class="comment"># 获取节点数据及状态</span></span><br><span class="line"><span class="built_in">set</span> /myapp <span class="string">&quot;new_data&quot;</span>        <span class="comment"># 更新数据</span></span><br><span class="line"><span class="built_in">ls</span> /                         <span class="comment"># 列出根目录下所有节点</span></span><br><span class="line">delete /myapp                <span class="comment"># 删除节点（需无子节点）</span></span><br><span class="line">rmr /myapp                   <span class="comment"># 递归删除节点及其子节点</span></span><br></pre></td></tr></table></figure>

<h4 id="2-监听节点变化"><a href="#2-监听节点变化" class="headerlink" title="2. 监听节点变化"></a>2. 监听节点变化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在客户端A执行监听</span></span><br><span class="line">get -w /myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在客户端B修改节点值，客户端A会收到事件通知</span></span><br><span class="line"><span class="built_in">set</span> /myapp <span class="string">&quot;updated&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用编程-API（Java-示例）"><a href="#3-使用编程-API（Java-示例）" class="headerlink" title="3. 使用编程 API（Java 示例）"></a>3. 使用编程 API（Java 示例）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加Maven依赖</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.9</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接并操作</span></span><br><span class="line"><span class="type">ZooKeeper</span> <span class="variable">zk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;localhost:2181&quot;</span>, <span class="number">3000</span>, <span class="literal">null</span>);</span><br><span class="line">zk.create(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;data&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line"><span class="type">byte</span>[] data = zk.getData(<span class="string">&quot;/test&quot;</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data)); <span class="comment">// 输出 &quot;data&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>功能</strong>：ZooKeeper 是分布式系统的“协调员”，解决配置、锁、节点管理等问题。</li>
<li><strong>安装</strong>：需 Java 环境，配置简单，支持单机和集群部署。</li>
<li><strong>使用</strong>：通过命令行或 API 操作节点，支持监听和强一致性。</li>
</ul>
]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>魔法方法</title>
    <url>/2025/03/08/python/magic/</url>
    <content><![CDATA[<p>Python 的 <strong>魔法方法（Magic Methods）</strong> 是以双下划线 <code>__</code> 开头和结尾的特殊方法，用于定义类的特定行为（如运算符重载、对象构造、字符串表示等）。这些方法由 Python 解释器自动调用，开发者可以通过实现它们来自定义类的行为。</p>
<h3 id="常见魔法方法分类"><a href="#常见魔法方法分类" class="headerlink" title="常见魔法方法分类"></a><strong>常见魔法方法分类</strong></h3><h4 id="1-构造与初始化"><a href="#1-构造与初始化" class="headerlink" title="1. 构造与初始化"></a><strong>1. 构造与初始化</strong></h4><ul>
<li><code>__init__(self, ...)</code>: 对象初始化时调用（不是构造函数，而是初始化方法）。</li>
<li><code>__new__(cls, ...)</code>: 类的构造函数，负责创建并返回实例对象（通常用于不可变类型或单例模式）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-字符串表示"><a href="#2-字符串表示" class="headerlink" title="2. 字符串表示"></a><strong>2. 字符串表示</strong></h4><ul>
<li><code>__str__(self)</code>: 返回对象的“用户友好”字符串表示（<code>print(obj)</code> 或 <code>str(obj)</code> 时调用）。</li>
<li><code>__repr__(self)</code>: 返回对象的“官方”字符串表示（用于调试，如直接输入对象名时显示）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Point(<span class="subst">&#123;self.x&#125;</span>, <span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Point(x=<span class="subst">&#123;self.x&#125;</span>, y=<span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-容器类方法"><a href="#3-容器类方法" class="headerlink" title="3. 容器类方法"></a><strong>3. 容器类方法</strong></h4><ul>
<li><code>__len__(self)</code>: 返回容器长度（<code>len(obj)</code> 时调用）。</li>
<li><code>__getitem__(self, key)</code>: 定义通过索引访问元素（<code>obj[key]</code>）。</li>
<li><code>__setitem__(self, key, value)</code>: 定义通过索引设置元素（<code>obj[key] = value</code>）。</li>
<li><code>__delitem__(self, key)</code>: 定义删除元素（<code>del obj[key]</code>）。</li>
<li><code>__contains__(self, item)</code>: 定义 <code>in</code> 操作符的行为（<code>item in obj</code>）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = <span class="built_in">list</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[index]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-属性访问"><a href="#4-属性访问" class="headerlink" title="4. 属性访问"></a><strong>4. 属性访问</strong></h4><ul>
<li><code>__getattr__(self, name)</code>: 当访问不存在的属性时调用。</li>
<li><code>__setattr__(self, name, value)</code>: 设置属性时调用（需避免递归调用）。</li>
<li><code>__delattr__(self, name)</code>: 删除属性时调用。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicAttributes</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Attribute <span class="subst">&#123;name&#125;</span> does not exist!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Setting <span class="subst">&#123;name&#125;</span> to <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__setattr__(name, value)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-比较操作符"><a href="#5-比较操作符" class="headerlink" title="5. 比较操作符"></a><strong>5. 比较操作符</strong></h4><ul>
<li><code>__eq__(self, other)</code>: <code>==</code></li>
<li><code>__ne__(self, other)</code>: <code>!=</code></li>
<li><code>__lt__(self, other)</code>: <code>&lt;</code></li>
<li><code>__le__(self, other)</code>: <code>&lt;=</code></li>
<li><code>__gt__(self, other)</code>: <code>&gt;</code></li>
<li><code>__ge__(self, other)</code>: <code>&gt;=</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="variable language_">self</span>.amount = amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.amount == other.amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.amount &lt; other.amount</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-算术运算符"><a href="#6-算术运算符" class="headerlink" title="6. 算术运算符"></a><strong>6. 算术运算符</strong></h4><ul>
<li><code>__add__(self, other)</code>: <code>+</code></li>
<li><code>__sub__(self, other)</code>: <code>-</code></li>
<li><code>__mul__(self, other)</code>: <code>*</code></li>
<li><code>__truediv__(self, other)</code>: <code>/</code></li>
<li><code>__floordiv__(self, other)</code>: <code>//</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(<span class="variable language_">self</span>.x + other.x, <span class="variable language_">self</span>.y + other.y)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-上下文管理"><a href="#7-上下文管理" class="headerlink" title="7. 上下文管理"></a><strong>7. 上下文管理</strong></h4><ul>
<li><code>__enter__(self)</code>: 进入 <code>with</code> 代码块时调用。</li>
<li><code>__exit__(self, exc_type, exc_val, exc_tb)</code>: 退出 <code>with</code> 代码块时调用（处理资源释放）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ManagedFile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file = <span class="built_in">open</span>(<span class="variable language_">self</span>.filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-迭代器协议"><a href="#8-迭代器协议" class="headerlink" title="8. 迭代器协议"></a><strong>8. 迭代器协议</strong></h4><ul>
<li><code>__iter__(self)</code>: 返回迭代器对象（通常是 <code>self</code>）。</li>
<li><code>__next__(self)</code>: 返回下一个元素（无元素时抛出 <code>StopIteration</code>）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountDown</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start</span>):</span><br><span class="line">        <span class="variable language_">self</span>.current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        num = <span class="variable language_">self</span>.current</span><br><span class="line">        <span class="variable language_">self</span>.current -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-调用对象"><a href="#9-调用对象" class="headerlink" title="9. 调用对象"></a><strong>9. 调用对象</strong></h4><ul>
<li><code>__call__(self, ...)</code>: 使实例可以像函数一样被调用。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Adder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">add = Adder()</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 输出 8</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol>
<li><strong>运算符重载需谨慎</strong>：确保重载后的行为符合直觉。</li>
<li><strong>避免无限递归</strong>：例如在 <code>__setattr__</code> 中直接赋值 <code>self.name = value</code> 会导致递归，应使用 <code>super().__setattr__</code>。</li>
<li><strong><code>__repr__</code> 和 <code>__str__</code> 的区别</strong>：<code>__repr__</code> 的目标是明确性，<code>__str__</code> 的目标是可读性。</li>
</ol>
<p>通过合理使用魔法方法，可以让自定义类的行为更加接近内置类型，提升代码的简洁性和可维护性。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>if __name__ == &quot;__main__&quot;</title>
    <url>/2025/03/08/python/main/</url>
    <content><![CDATA[<p><code>if __name__ == &quot;__main__&quot;:</code> 是 Python 中一个常见的代码块，<strong>它的核心作用是区分当前模块是直接运行还是被导入到其他模块中</strong>。这个机制使得 Python 文件既可以独立执行，也能作为模块被其他代码复用。以下是详细解释：</p>
<h3 id="一、作用"><a href="#一、作用" class="headerlink" title="一、作用"></a><strong>一、作用</strong></h3><h4 id="1-控制代码执行范围"><a href="#1-控制代码执行范围" class="headerlink" title="1. 控制代码执行范围"></a><strong>1. 控制代码执行范围</strong></h4><ul>
<li><strong>直接运行该文件时</strong>：<code>if __name__ == &quot;__main__&quot;:</code> 下的代码会被执行。</li>
<li><strong>被其他文件导入时</strong>：<code>if __name__ == &quot;__main__&quot;:</code> 下的代码不会执行。</li>
</ul>
<h4 id="2-典型应用场景"><a href="#2-典型应用场景" class="headerlink" title="2. 典型应用场景"></a><strong>2. 典型应用场景</strong></h4><ul>
<li><strong>模块的测试代码</strong>：将测试代码放在此块中，避免被其他模块导入时触发。</li>
<li><strong>脚本的入口</strong>：定义程序的主逻辑，例如启动服务或命令行工具。</li>
<li><strong>避免副作用</strong>：防止模块被导入时自动执行不必要的操作。</li>
</ul>
<h3 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a><strong>二、原理</strong></h3><h4 id="1-name-的含义"><a href="#1-name-的含义" class="headerlink" title="1. __name__ 的含义"></a><strong>1. <code>__name__</code> 的含义</strong></h4><ul>
<li>Python 中每个模块都有一个内置属性 <code>__name__</code>。</li>
<li><strong>当模块被直接运行时</strong>：<code>__name__</code> 会被自动赋值为 <code>&quot;__main__&quot;</code>。</li>
<li><strong>当模块被导入时</strong>：<code>__name__</code> 会被赋值为模块的文件名（去掉 <code>.py</code> 后缀）。</li>
</ul>
<h4 id="2-条件判断的逻辑"><a href="#2-条件判断的逻辑" class="headerlink" title="2. 条件判断的逻辑"></a><strong>2. 条件判断的逻辑</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 直接运行该文件时执行</span></span><br><span class="line">    main()  <span class="comment"># 例如调用主函数</span></span><br></pre></td></tr></table></figure>

<h3 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a><strong>三、示例</strong></h3><h4 id="1-场景一：直接运行脚本"><a href="#1-场景一：直接运行脚本" class="headerlink" title="1. 场景一：直接运行脚本"></a><strong>1. 场景一：直接运行脚本</strong></h4><p>假设有一个文件 <code>test.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from test!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接运行该文件时输出:&quot;</span>)</span><br><span class="line">    hello()</span><br></pre></td></tr></table></figure>

<p><strong>直接运行</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接运行该文件时输出:</span><br><span class="line">Hello from test!</span><br></pre></td></tr></table></figure>

<h4 id="2-场景二：被其他模块导入"><a href="#2-场景二：被其他模块导入" class="headerlink" title="2. 场景二：被其他模块导入"></a><strong>2. 场景二：被其他模块导入</strong></h4><p>在另一个文件 <code>another_script.py</code> 中导入 <code>test</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line">test.hello()</span><br></pre></td></tr></table></figure>

<p><strong>运行</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python another_script.py</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello from test!  # 仅执行导入后的函数调用</span><br></pre></td></tr></table></figure>

<p>此时 <code>test</code> 中的 <code>if __name__ == &quot;__main__&quot;:</code> 代码块不会触发。</p>
<h3 id="四、深入理解"><a href="#四、深入理解" class="headerlink" title="四、深入理解"></a><strong>四、深入理解</strong></h3><h4 id="1-Python-模块的执行流程"><a href="#1-Python-模块的执行流程" class="headerlink" title="1. Python 模块的执行流程"></a><strong>1. Python 模块的执行流程</strong></h4><ul>
<li><strong>直接运行文件时</strong>：<ol>
<li>Python 解释器会将该文件视为主程序（<code>__main__</code>）。</li>
<li>执行文件中的所有顶层代码（包括函数定义和 <code>if __name__ == &quot;__main__&quot;:</code> 块）。</li>
</ol>
</li>
<li><strong>导入文件时</strong>：<ol>
<li>Python 解释器将该文件视为模块。</li>
<li>执行文件中的顶层代码（例如函数定义），但跳过 <code>if __name__ == &quot;__main__&quot;:</code> 块。</li>
</ol>
</li>
</ul>
<h4 id="2-验证-name-的值"><a href="#2-验证-name-的值" class="headerlink" title="2. 验证 __name__ 的值"></a><strong>2. 验证 <code>__name__</code> 的值</strong></h4><p>在 <code>test.py</code> 中添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前模块的 __name__ 是:&quot;</span>, __name__)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>直接运行</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前模块的 __name__ 是: __main__</span><br></pre></td></tr></table></figure></li>
<li><strong>被导入时</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前模块的 __name__ 是: test</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a><strong>五、常见问题</strong></h3><h4 id="1-如果不写-if-name-main-会怎样？"><a href="#1-如果不写-if-name-main-会怎样？" class="headerlink" title="1. 如果不写 if __name__ == &quot;__main__&quot;: 会怎样？"></a><strong>1. 如果不写 <code>if __name__ == &quot;__main__&quot;:</code> 会怎样？</strong></h4><ul>
<li><strong>直接运行文件时</strong>：所有顶层代码（包括函数外的代码）都会执行。</li>
<li><strong>被导入时</strong>：所有顶层代码也会执行，可能导致意外的副作用（例如自动启动服务）。</li>
</ul>
<h4 id="2-是否必须写在文件末尾？"><a href="#2-是否必须写在文件末尾？" class="headerlink" title="2. 是否必须写在文件末尾？"></a><strong>2. 是否必须写在文件末尾？</strong></h4><ul>
<li><strong>否</strong>。可以写在任何位置，但通常放在文件末尾以保持代码整洁。</li>
</ul>
<h4 id="3-是否只能用于单文件脚本？"><a href="#3-是否只能用于单文件脚本？" class="headerlink" title="3. 是否只能用于单文件脚本？"></a><strong>3. 是否只能用于单文件脚本？</strong></h4><ul>
<li><strong>否</strong>。在多文件项目中，每个文件都可以有自己的 <code>if __name__ == &quot;__main__&quot;:</code> 块，用于独立测试。</li>
</ul>
<h3 id="六、最佳实践"><a href="#六、最佳实践" class="headerlink" title="六、最佳实践"></a><strong>六、最佳实践</strong></h3><h4 id="1-将主逻辑封装为函数"><a href="#1-将主逻辑封装为函数" class="headerlink" title="1. 将主逻辑封装为函数"></a><strong>1. 将主逻辑封装为函数</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是主函数逻辑&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()  <span class="comment"># 更清晰的入口</span></span><br></pre></td></tr></table></figure>

<h4 id="2-避免在模块顶层写业务逻辑"><a href="#2-避免在模块顶层写业务逻辑" class="headerlink" title="2. 避免在模块顶层写业务逻辑"></a><strong>2. 避免在模块顶层写业务逻辑</strong></h4><ul>
<li>将可复用的函数或类定义在顶层。</li>
<li>将执行代码放在 <code>if __name__ == &quot;__main__&quot;:</code> 块中。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><code>if __name__ == &quot;__main__&quot;:</code> 是 Python 的模块化编程基石之一。<strong>它通过 <code>__name__</code> 变量的动态赋值，实现了代码的“双重身份”</strong>：既可以是独立运行的程序，也可以是被复用的模块。合理使用这一机制，可以显著提升代码的可维护性和复用性。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>元类原理及使用</title>
    <url>/2025/03/08/python/metaclass/</url>
    <content><![CDATA[<p>在 Python 中，<strong>元类（Metaclass）</strong> 是用于创建类的类，被称为“类的类”。所有的类（包括 <code>object</code>）都由元类生成，默认的元类是 <code>type</code>。通过自定义元类，可以在类创建时动态修改类的定义（如属性、方法、继承关系等），实现高度灵活的元编程。</p>
<h3 id="元类的基本原理"><a href="#元类的基本原理" class="headerlink" title="元类的基本原理"></a><strong>元类的基本原理</strong></h3><h4 id="1-类的创建过程"><a href="#1-类的创建过程" class="headerlink" title="1. 类的创建过程"></a>1. <strong>类的创建过程</strong></h4><ul>
<li>当定义类时，Python 解释器会调用元类的 <code>__new__</code> 和 <code>__init__</code> 方法生成类。</li>
<li>默认情况下，所有类由 <code>type</code> 元类创建：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下两种定义等价</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">MyClass = <span class="built_in">type</span>(<span class="string">&#x27;MyClass&#x27;</span>, (), &#123;&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-元类的继承关系"><a href="#2-元类的继承关系" class="headerlink" title="2. 元类的继承关系"></a>2. <strong>元类的继承关系</strong></h4><ul>
<li><code>type</code> 是所有类的元类（包括 <code>object</code>）。</li>
<li>自定义元类需要继承 <code>type</code>，并重写 <code>__new__</code> 或 <code>__init__</code> 方法。</li>
<li>类的 <code>__metaclass__</code> 属性决定其元类（Python 3 中通过 <code>class MyClass(metaclass=MyMeta)</code> 指定）。</li>
</ul>
<h3 id="自定义元类的步骤"><a href="#自定义元类的步骤" class="headerlink" title="自定义元类的步骤"></a><strong>自定义元类的步骤</strong></h3><h4 id="1-定义元类"><a href="#1-定义元类" class="headerlink" title="1. 定义元类"></a>1. <strong>定义元类</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="comment"># 在类创建前修改属性</span></span><br><span class="line">        attrs[<span class="string">&#x27;version&#x27;</span>] = <span class="number">1.0</span>  <span class="comment"># 动态添加类属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, bases, attrs</span>):</span><br><span class="line">        <span class="comment"># 初始化类</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, bases, attrs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;类 <span class="subst">&#123;name&#125;</span> 被创建&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-使用元类创建类"><a href="#2-使用元类创建类" class="headerlink" title="2. 使用元类创建类"></a>2. <strong>使用元类创建类</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(metaclass=MyMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello from MyClass&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: 类 MyClass 被创建</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.version)  <span class="comment"># 1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="元类的核心方法"><a href="#元类的核心方法" class="headerlink" title="元类的核心方法"></a><strong>元类的核心方法</strong></h3><h4 id="1-new-cls-name-bases-attrs"><a href="#1-new-cls-name-bases-attrs" class="headerlink" title="1. __new__(cls, name, bases, attrs)"></a>1. <strong><code>__new__(cls, name, bases, attrs)</code></strong></h4><ul>
<li><strong>作用</strong>：创建类对象（控制类的生成过程）。</li>
<li><strong>参数</strong>：<ul>
<li><code>cls</code>：元类自身。</li>
<li><code>name</code>：类名。</li>
<li><code>bases</code>：基类元组。</li>
<li><code>attrs</code>：类的命名空间（包含属性、方法等）。</li>
</ul>
</li>
</ul>
<h4 id="2-init-self-name-bases-attrs"><a href="#2-init-self-name-bases-attrs" class="headerlink" title="2. __init__(self, name, bases, attrs)"></a>2. <strong><code>__init__(self, name, bases, attrs)</code></strong></h4><ul>
<li><strong>作用</strong>：初始化类对象（类似普通类的 <code>__init__</code>）。</li>
<li><strong>参数</strong>：与 <code>__new__</code> 相同，但 <code>self</code> 是已创建的类。</li>
</ul>
<h4 id="3-prepare-cls-name-bases-（可选）"><a href="#3-prepare-cls-name-bases-（可选）" class="headerlink" title="3. **__prepare__(cls, name, bases)**（可选）"></a>3. **<code>__prepare__(cls, name, bases)</code>**（可选）</h4><ul>
<li><strong>作用</strong>：返回一个字典对象，用于存储类的命名空间。</li>
<li><strong>用途</strong>：自定义类的属性存储方式（如使用 <code>OrderedDict</code> 保持顺序）。</li>
</ul>
<h3 id="元类的应用场景"><a href="#元类的应用场景" class="headerlink" title="元类的应用场景"></a><strong>元类的应用场景</strong></h3><h4 id="1-强制类属性规范"><a href="#1-强制类属性规范" class="headerlink" title="1. 强制类属性规范"></a>1. <strong>强制类属性规范</strong></h4><p>要求子类必须实现特定方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterfaceMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;run&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> attrs:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;类 <span class="subst">&#123;name&#125;</span> 必须实现 run 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(metaclass=InterfaceMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 必须实现 run 方法</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未实现 run 方法会报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InvalidTask</span>(metaclass=InterfaceMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2. 单例模式"></a>2. <strong>单例模式</strong></h4><p>确保类只有一个实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">            cls._instances[cls] = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">s1 = Singleton()</span><br><span class="line">s2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h4 id="3-自动注册子类"><a href="#3-自动注册子类" class="headerlink" title="3. 自动注册子类"></a>3. <strong>自动注册子类</strong></h4><p>将子类自动注册到全局：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PluginMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    registry = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        new_class = <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line">        <span class="keyword">if</span> name != <span class="string">&#x27;BasePlugin&#x27;</span>:</span><br><span class="line">            cls.registry[name] = new_class</span><br><span class="line">        <span class="keyword">return</span> new_class</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePlugin</span>(metaclass=PluginMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PluginA</span>(<span class="title class_ inherited__">BasePlugin</span>): <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PluginB</span>(<span class="title class_ inherited__">BasePlugin</span>): <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(PluginMeta.registry)  <span class="comment"># &#123;&#x27;PluginA&#x27;: &lt;class ...&gt;, &#x27;PluginB&#x27;: &lt;class ...&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-ORM-框架"><a href="#4-ORM-框架" class="headerlink" title="4. ORM 框架"></a>4. <strong>ORM 框架</strong></h4><p>模拟 Django ORM 动态生成模型字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Field</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">type</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        fields = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, Field):</span><br><span class="line">                fields[key] = value</span><br><span class="line">        attrs[<span class="string">&#x27;_fields&#x27;</span>] = fields</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(metaclass=ModelMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    name = Field(<span class="built_in">str</span>)</span><br><span class="line">    age = Field(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(User._fields)  <span class="comment"># &#123;&#x27;name&#x27;: &lt;Field object&gt;, &#x27;age&#x27;: &lt;Field object&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="元类-vs-类装饰器"><a href="#元类-vs-类装饰器" class="headerlink" title="元类 vs 类装饰器"></a><strong>元类 vs 类装饰器</strong></h3><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>元类</strong></th>
<th><strong>类装饰器</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>作用阶段</strong></td>
<td>类创建时</td>
<td>类创建后</td>
</tr>
<tr>
<td><strong>控制范围</strong></td>
<td>类的生成过程（包括继承、属性等）</td>
<td>修改已存在的类</td>
</tr>
<tr>
<td><strong>复杂度</strong></td>
<td>更高</td>
<td>较低</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>深度定制类行为（如ORM、接口验证）</td>
<td>简单增强或修改类（如添加方法）</td>
</tr>
</tbody></table>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol>
<li><strong>谨慎使用元类</strong>：<ul>
<li>元类会增加代码复杂性，优先考虑其他方案（如装饰器或继承）。</li>
</ul>
</li>
<li><strong>继承链中的元类</strong>：<ul>
<li>子类的元类必须与父类的元类兼容，否则会抛出 <code>TypeError</code>。</li>
</ul>
</li>
<li><strong>调试困难</strong>：<ul>
<li>元类的错误可能难以追踪，建议编写单元测试。</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>元类是 Python 元编程的核心工具，允许在类创建时动态修改其定义。它在框架开发（如 Django、SQLAlchemy）中广泛使用，但日常开发中应避免过度设计。理解元类的工作原理需要深入掌握以下概念：</p>
<ol>
<li>类的创建过程（<code>type</code> 的作用）。</li>
<li><code>__new__</code> 和 <code>__init__</code> 在元类中的分工。</li>
<li><code>__prepare__</code> 对类命名空间的控制。</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
